\input texinfo
@setfilename odt2braille-dev-doc.info
@documentencoding UTF-8
@include version.texi
@settitle odt2braille Developer Guide
@finalout

@defindex class

@include copying.texi

@titlepage
@title odt2braille Developer Guide
@subtitle for version @value{VERSION}, @value{UPDATED}
@author by Bert Frees
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@node Top
@top Introduction

@ifnottex
@insertcopying
@end ifnottex

@menu
* Hacking::
* Projects::
* Liblouisxml::
* Tutorials::
* Task list::
@end menu

@node Hacking
@chapter Hacking

@unnumberedsec System Requirements

In order to hack odt2braille, you need the following software:

@unnumberedsubsec OpenOffice.org

The latest version of the @url{http://download.openoffice.org/other.html, OpenOffice.org} office
suite can be downloaded here.

@unnumberedsubsec OpenOffice.org Software Development Kit

The OpenOffice.org SDK is an add-on for OpenOffice.org. It provides the necessary tools 
and documentation for programming the OpenOffice.org APIs and creating own extensions.
The latest version of
@url{http://download.openoffice.org/sdk/index.html, OpenOffice.org SDK} can be downloaded here.
Make sure you install OpenOffice.org first.
The version of OpenOffice.org SDK should be equal or lower than the version of OpenOffice.org.

@unnumberedsubsec NetBeans

Odt2braille was developed in NetBeans, an integrated development environment.
The latest version of @url{http://netbeans.org/downloads/, NetBeans} can be downloaded here.
Make sure the Java SE pack is included.

@unnumberedsubsec OpenOffice.org API Plugin for NetBeans

To install the OOo API Plugin for NetBeans, launch NetBeans, go to [@emph{Tools > Plugins}], 
then select @emph{OpenOffice.org API Plugin} in @emph{Available Plugins} and click on @emph{Install}.
Now relaunch NetBeans and
configure the plugin in [@emph{Tools > Options > Miscellaneous > OOo API Plugin}]
by selecting the appropriate OpenOffice.org installation and OpenOffice.org SDK folder.

[@@TODO] NetBeans with OpenOffice.org API plugin may be replaced by Eclipse with OOEclipse plugin.

@unnumberedsec Odt2braille Source Code

The source code is available on Sourceforge and can be downloaded directly into NetBeans as follows:
@itemize @minus
@item
[@emph{Team - Subversion - Checkout}]
@item
@emph{Repository URL}: "https://odt2braille.svn.sourceforge.net/svnroot/odt2braille".
Leave @emph{"User"} and @emph{"Password"} fields blank.
@item
@emph{Next >}
@item
@emph{Repository Folders}: "DaisyPipeline, Odt2Braille, Odt2BrailleAddOn"
@item
Check @emph{"Scan for NetBeans Projects after checkout"}.
@item
@emph{Finish}
@end itemize

The source code can also be downloaded without NetBeans:
@itemize @minus
@item
@code{svn co https://odt2braille.svn.sourceforge.net/svnroot/odt2braille path/to/odt2braille/folder/}
@end itemize

@unnumberedsec Build

Build projects with NetBeans:
@itemize @minus
@item
Open @emph{"Projects"} window, than right click a project and choose menu item @emph{"Build"}.
@end itemize

Build projects with Apache ANT:
@itemize @minus
@item
@code{cd} to project directory
@item
@code{ant}
@end itemize

Create .oxt file with NetBeans:
@itemize @minus
@item
Open @emph{"Projects"} window, than right click @emph{"Odt2BrailleAddOn"} 
and choose menu item @emph{"Create OXT"} or @emph{"Deploy and Run Extension in OpenOffice.org"}.
@item
The .oxt file will be created in Odt2BrailleAddOn/dist.
@end itemize

Create .oxt file with Apache ANT:
@itemize @minus
@item
@code{cd} to Odt2BrailleAddOn directory
@item
@code{ant uno-package}
@item
The .oxt file will be created in Odt2BrailleAddOn/dist.
@end itemize

@unnumberedsec Documentation

Texinfo:
@itemize @minus
@item
@code{cd} to Odt2BrailleAddOn/doc
@item
@code{
texi2dvi --pdf
@*@w{         }odt2braille-user-doc.texi}
@item
@code{
makeinfo --html
@*@w{        }[--no-split]
@*@w{        }[--no-headers]
@*@w{         }--output=odt2braille-user-doc.html
@*@w{         }odt2braille-user-doc.texi}

@end itemize	
			
Javadoc:

@itemize @minus
@item
@code{cd} to directory containing all projects
@item
@code{
javadoc [-private]
@*@w{        }[-author]
@*@w{        }[-version]
@*@w{        }[-breakiterator]
@*@w{         }-d Odt2BrailleAddOn\doc\javadoc
@*@w{         }-subpackages be.docarch:org_pef_text
@*@w{         }-sourcepath Odt2BrailleAddOn\src;Odt2Braille\src;DaisyPipeline\src
}
@end itemize

@unnumberedsec Downloads

@itemize @minus
@item
Apache Subversion: @url{http://subversion.apache.org/}
@item
Apache Ant (1.7.1 or higher): @url{http://ant.apache.org/}
@item
Javadoc: @url{http://java.sun.com/j2se/javadoc/downloads/index.html#findjavadoc}
@item
Texinfo: @url{http://www.gnu.org/software/texinfo/}
@end itemize

@node Projects
@chapter Projects

This is an overview of the projects that are created in NetBeans after odt2braille has been succesfully checked out.

@menu
* Odt2BrailleAddOn::
* Odt2Braille::
* DaisyPipeline::
@end menu

@node Odt2BrailleAddOn
@unnumberedsec Odt2BrailleAddOn

Odt2BrailleAddOn is the OpenOffice.org extension. It makes extensive use of the OpenOffice.org UNO API.
It takes care of the graphical user interface (menu's, dialogs, progress bars, etc.) and
allows for loading settings from and saving settings to OpenOffice.org or the OpenOffice.org Writer document.
For the actual document processing, Odt2BrailleAddOn relies on the Odt2Braille library.

Packages in Odt2BrailleAddOn:

@code{@url{javadoc/be/docarch/odt2braille/addon/package-summary.html, be.docarch.odt2braille.addon}}

@node Odt2Braille
@unnumberedsec Odt2Braille

The Odt2Braille library takes care of the actual document processing. It enables the conversion of a 
flat xml odt file to a @url{http://www.daisy.org/projects/braille/braille_workarea/pef.html, pef}
(Portable Embosser Format) file. Furthermore, this pef file can be converted to a variety of other
generic braille formats, or it can be converted to an embosser-specific braille file
(and optionally sent to an embosser device).
The braille transcription is powered by liblouisxml, and for the pef processing, Odt2Braille uses
the DaisyPipeline library. The Java OpenDocument Library (JODL) is used for creating and cleaning 
the flat .odt file (see @url{http://odt2daisy.sourceforge.net/downloads/}).

Packages in Odt2Braille:

@code{@url{javadoc/be/docarch/odt2braille/package-summary.html, be.docarch.odt2braille}}

@node DaisyPipeline
@unnumberedsec DaisyPipeline

The DaisyPipeline project contains the @code{org_pef_text} and @code{org_pef_text.pef2text} packages. 
These packages have been adopted from the @url{http://www.daisy.org/project/pipeline,DAISY Pipeline} and 
have been slightly modified. 
Their purpose is to convert a PEF 2008-1 document into a plain text braille file (see also the 
@code{@url{http://data.daisy.org/projects/pipeline/doc/transformers/org_pef_pef2text.html, pef2text}} documentation).

Packages in DaisyPipeline:

@code{@url{javadoc/org_pef_text/package-tree.html, org_pef_text}} and
@code{@url{javadoc/org_pef_text/pef2text/package-tree.html, org_pef_text.pef2text}}

@node Liblouisxml
@chapter Liblouisxml

@url{http://liblouisxml.googlecode.com, Liblouisxml} is the heart of the braille transcription. 
It is an open-source library intended to provide complete Braille transcription services for XML documents.
Liblouisxml is built on top of @url{http://liblouis.googlecode.com, liblouis}, its translation engine.
The translation is driven through text based translation tables which define the translation rules.
The formatting of braille is defined in semantic mappings that define how a specific XML input tag is
to be rendered in the Braille output. Liblouisxml is embedded in odt2braille as an executable.
It can be found in the Odt2BrailleAddOn project under @code{liblouis/bin}.
The translation tables and configuration files are kept under @code{liblouis/share}.

For more information read the
@code{@url{http://liblouisxml.googlecode.com/svn/documentation/liblouisxml.html, liblouisxml}} and
@code{@url{http://liblouis.googlecode.com/svn/documentation/liblouis.html, libouis}} manuals.

@node Tutorials
@chapter Tutorials

@unnumberedsec Adding an embosser

To add support for an embosser, the protocol for giving print instructions to that embosser has to be known.
This includes e.g.
@itemize @bullet
@item
the configuration of the header which initiates the print job and gives general printing information,
@item
the way Braille pages and Braille lines are represented,
@item
the way each Braille character is represented (the character set),
@item
the footer which ends the print job, etc.
@end itemize

In addition, you should know the dimensions of cell spacing and line spacing, whether the embosser 
can print interpoint (duplex), which paper sizes are supported, etc.

Once the protocol is known, it can be implemented. What follows is a more or less general way of 
adapting the code in order to add an embosser. But because each embosser is different, extra
adjustments may have to be made.

@itemize @bullet
@item
In @code{org_pef_text.pef2text.EmbosserFactory}, expand the @code{EmbosserType} enumeration with
a new embosser type. Add a @code{case} for this new embosser type to the @code{switch} statement
in the @code{newEmbosser} function.
@item
Possibly, a new character set may have to be defined in @code{org_pef_text.TableFactory} as well.
Edit the @code{TableType} enumeration and the @code{newTable} function.
@item
Finally, in @code{be.docarch.odt2braille.Settings}, the functions 
@code{embosserIsSupported},
@code{changeEmbosser},
@code{tableIsSupported},
@code{paperSizeIsSupported},
@code{changePaperSize},
@code{getMaxPaperWidth},
@code{getMaxPaperHeight},
@code{getMinPaperWidth},
@code{getMinPaperHeight} and 
@code{duplexIsSupported} 
need adjustments.
@end itemize

@node Task list
@chapter Task list

@itemize @bullet
@item
More flexibility by providing more settings!

@itemize @minus
@item
Settings for footnotes, endnotes, TNs, bibliography, ...
@item
Volume info and transcription info.
@item
'Continued' suffix.
@item
Border lines of tables & textboxes ???
 => linesAbove/linesBelow (integer) uitbreiden met borderAbove/borderBelow (string)
  -> Aantal karakters in string = aantal lijnen in border
  -> n-de karakter = braille symbool waarmee n-de border lijn gevuld wordt
@item
Table Of Contents:
  - headings tot level ? weergeven
  - printpagina nummers weergeven
  - braillepagina nummers weergeven
@item
...
@end itemize

@item
Mac OS, Linux, ... !!!
@item
Add more "Braille formatting standards" (now: only BANA) (eg. also UEBC)
@item
Documentation!
@item
Support more embossers.
@item
Only Interpoint55 is tested.
@item
Tooltips in dialogs.
@item
Keyboard shortcut for Braille menu.
@item
Howto handle unknown characters? (-> now: dots 3456) (-> "undefined" opcode ?)
@item
Hidden paragraphs (or paragraphs in hidden sections) => transcriber's notes (braille-only material). TN => settings!
@item
8 dot Braille.
@item
Tactile graphics.
@item
If the liblouisxml process takes to long (e.g. with Chinese), OpenOffice.org might think the program is not responding.
@item
OpenOffice.org accessibility for screen readers (on Windows)?
@item
http://www.thessalonica.org.ru/en/index.html ?
@item
Check if the number of cells per line (and the number of lines per page) is sufficient (if too small, this might cause liblouisxml to fail).
@item
Endnotes in preliminary pages: fix bug.
@item
makePEF(): should be made more robust.
@item
Odt2Daisy.preProcessing(): should be made faster.
Replace DOM processing with XSL transformation where this is possible.
This will result in better performance.
(Vincent Spiewak is rewriting JODL in XSLT 2.0)
@item
When multi-volume feature of liblouisxml is finished: Odt2Braille code might be simplified.
@item
Jlouis ?
@item
UTD & liblouisutdml?
@item
Presentations & spreadsheets.
@item
Commandline tool (Odt2Braille.jar).
@item
Er kunnen nog lege paragrafen voorkomen (als er lege 'span's inzaten: bv door special typeface / languages)
Door 'clear formatting' toe te passen op deze paragrafen is dit probleem weg.
@item
Uitleg van WinBraille over g0,g1,g2,...
* g0 = one to one
* g1 = literary one to one with capital and figure prefix
* g2,g3,g4,... = contracted braille
@item
Wanneer de instelling "export/ emboss naar specifieke brailleprinter" is opgeslagen
	=> OOo crasht (Windows XP) bij oproepen van dialoogvenster => is dit nog steeds zo?
@item
Voor Ubuntu: OOo 3.2.1 nodig ?
@item
Settings in Tools > Options... ?
@item
Zoveel mogelijk originele tabellen includen en sommige default bestanden (tables) overschrijven met eigen (files)
@item
...
@end itemize

@bye
