\input texinfo
@setfilename odt2braille-dev-doc.info
@documentencoding UTF-8
@include version.texi
@settitle odt2braille Developer Guide
@finalout

@defindex class

@include copying.texi

@titlepage
@title odt2braille Developer Guide
@subtitle for version @value{VERSION}, @value{UPDATED}
@author by Bert Frees
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@node Top
@top Introduction

@ifnottex
@insertcopying
@end ifnottex

@menu
* Hacking::
* Project Overview::
* Libraries::
* Tutorials::
* Task list::
@end menu

@node Hacking
@chapter Hacking

@unnumberedsec System Requirements

In order to hack odt2braille, you need the following software:

@unnumberedsubsec OpenOffice.org

The latest version of the @url{http://download.openoffice.org/other.html, OpenOffice.org} office
suite can be downloaded here.

@unnumberedsubsec OpenOffice.org Software Development Kit

The OpenOffice.org SDK is an add-on for OpenOffice.org. It provides the necessary tools 
and documentation for programming the OpenOffice.org APIs and creating own extensions.
The latest version of
@url{http://download.openoffice.org/sdk/index.html, OpenOffice.org SDK} can be downloaded here.
Make sure you install OpenOffice.org first.
The version of OpenOffice.org SDK should be equal or lower than the version of OpenOffice.org.

@unnumberedsubsec NetBeans

odt2braille was developed in NetBeans, an integrated development environment.
The latest version of @url{http://netbeans.org/downloads/, NetBeans} can be downloaded here.
Make sure the Java SE pack is included.

@unnumberedsubsec OpenOffice.org API Plugin for NetBeans

To install the OOo API Plugin for NetBeans, launch NetBeans, go to [@emph{Tools > Plugins}], 
then select @emph{OpenOffice.org API Plugin} in @emph{Available Plugins} and click on @emph{Install}.
Now relaunch NetBeans and
configure the plugin in [@emph{Tools > Options > Miscellaneous > OOo API Plugin}]
by selecting the appropriate OpenOffice.org installation and OpenOffice.org SDK folder.

@unnumberedsubsec Other Downloads

@itemize @minus
@item
Apache Subversion: @url{http://subversion.apache.org/}
@item
Apache Ant (1.7.1 or higher): @url{http://ant.apache.org/}
@item
Javadoc: @url{http://java.sun.com/j2se/javadoc/downloads/index.html#findjavadoc}
@item
Texinfo: @url{http://www.gnu.org/software/texinfo/}
@end itemize

@unnumberedsec Source Code

The source code is available on Sourceforge and can be downloaded directly into NetBeans as follows:
@itemize @minus
@item
[@emph{Team - Subversion - Checkout}]
@item
@emph{Repository URL}: "https://odt2braille.svn.sourceforge.net/svnroot/odt2braille".
Leave @emph{"User"} and @emph{"Password"} fields blank.
@item
@emph{Next >}
@item
@emph{Repository Folders}: "Odt2BrailleAddOn"
@item
Check @emph{"Scan for NetBeans Projects after checkout"}.
@item
@emph{Finish}
@end itemize

The code can also be downloaded without NetBeans:
@itemize @minus
@item
@code{svn checkout https://odt2braille.svn.sourceforge.net/svnroot/odt2braille path/to/odt2braille/folder/}
@end itemize

@unnumberedsec Building

Build with NetBeans:
@itemize @minus
@item
Open @emph{"Projects"} window
@item
Right click the Odt2BrailleAddOn project and choose menu item @emph{"Build"}.
@end itemize

Build with Apache ANT:
@itemize @minus
@item
@code{cd path/to/odt2braille/folder/Odt2BrailleAddOn}
@item
@code{ant}
@end itemize

Create OpenOffice.org extension file (.oxt) with NetBeans:
@itemize @minus
@item
Open @emph{"Projects"} window, than right click @emph{"Odt2BrailleAddOn"} 
and choose menu item @emph{"Create OXT"} or @emph{"Deploy and Run Extension in OpenOffice.org"}.
@item
The .oxt file will be created in @code{path/to/odt2braille/folder/Odt2BrailleAddOn/dist}.
@end itemize

Create OpenOffice.org extension file (.oxt) with Apache ANT:
@itemize @minus
@item
@code{cd path/to/odt2braille/folder/Odt2BrailleAddOn}
@item
@code{ant uno-package}
@item
The .oxt file will be created in @code{path/to/odt2braille/folder/Odt2BrailleAddOn/dist}.
@end itemize

@node Project Overview
@chapter Project Overview

@menu
* be.docarch.odt2braille.ooo::
* be.docarch.odt2braille::
@end menu

@node be.docarch.odt2braille.ooo
@unnumberedsec be.docarch.odt2braille.ooo

be.docarch.odt2braille.ooo is the OpenOffice.org extension. It makes extensive use of the OpenOffice.org UNO API.
It takes care of the graphical user interface (menu's, dialogs, progress bars, etc.) and
allows for loading settings from and saving settings to OpenOffice.org or the OpenOffice.org Writer document.

@unnumberedsubsec Documentation

@code{@url{javadoc/be/docarch/odt2braille/ooo/package-summary.html, be.docarch.odt2braille.ooo}}

@unnumberedsubsec View code

@itemize @minus
@item
@url{http://odt2braille.svn.sourceforge.net/svnroot/odt2braille/Odt2BrailleAddOn/src/be/docarch/odt2braille/ooo/}
@item
@url{http://odt2braille.svn.sourceforge.net/viewvc/odt2braille/Odt2BrailleAddOn/src/be/docarch/odt2braille/ooo/}
@end itemize

@node be.docarch.odt2braille
@unnumberedsec be.docarch.odt2braille

The be.docarch.odt2braille subpackage takes care of the actual document processing. It enables the conversion of a 
flat xml odt file to a @url{http://www.daisy.org/projects/braille/braille_workarea/pef.html, pef}
(Portable Embosser Format) file. Furthermore, this pef file can be converted to a variety of other
generic braille formats, or it can be converted to an embosser-specific braille file
(and optionally sent to an embosser device).
The braille transcription is powered by liblouisxml, and for the pef processing, odt2braille uses
the BrailleUtils library. For cleaning, modifying and preparing the .odt file, code of the Java 
OpenDocument Library (JODL) is used (see @url{http://odt2daisy.sourceforge.net/downloads/}).

@unnumberedsubsec Documentation

@code{@url{javadoc/be/docarch/odt2braille/package-summary.html, be.docarch.odt2braille}}

@unnumberedsubsec View code

@itemize @minus
@item
@url{https://odt2braille.svn.sourceforge.net/svnroot/odt2braille/Odt2BrailleAddOn/src/be/docarch/odt2braille/}
@item
@url{http://odt2braille.svn.sourceforge.net/viewvc/odt2braille/Odt2BrailleAddOn/src/be/docarch/odt2braille/}
@end itemize

@node Libraries
@chapter Libraries

@menu
* liblouisxml::
* brailleutils::
@end menu

@node liblouisxml
@unnumberedsec liblouisxml

@url{http://liblouisxml.googlecode.com, liblouisxml} is the heart of the braille transcription. 
It is an open-source library intended to provide complete Braille transcription services for XML documents.
Liblouisxml is built on top of @url{http://liblouis.googlecode.com, liblouis}, its translation engine.
The translation is driven through text based translation tables which define the translation rules.
The formatting of braille is defined in semantic mappings that define how a specific XML input tag is
to be rendered in the Braille output. liblouisxml is embedded in odt2braille as an executable.
It can be found in the Odt2BrailleAddOn project under @code{liblouis/bin}.
The translation tables and configuration files are kept under @code{liblouis/share}.

@unnumberedsubsec Source Code

@itemize @minus
@item
@code{svn checkout http://liblouis.googlecode.com/svn/trunk/ path/to/liblouis/folder/}
@item
@code{svn checkout http://liblouisxml.googlecode.com/svn/trunk/ path/to/liblouisxml/folder/}
@end itemize

@unnumberedsubsec Documentation

For more information read the
@code{@url{http://liblouisxml.googlecode.com/svn/documentation/liblouisxml.html, liblouisxml}} and
@code{@url{http://liblouis.googlecode.com/svn/documentation/liblouis.html, libouis}} manuals.

@node brailleutils
@unnumberedsec brailleutils

See the @url{http://code.google.com/p/brailleutils/, brailleutils} website.

@unnumberedsubsec Source Code

@itemize @minus
@item
@code{svn checkout http://brailleutils.googlecode.com/svn/trunk/braille/ path/to/brailleutils/folder/}
@end itemize

@unnumberedsubsec Building

@itemize @minus
@item
@code{cd path/to/brailleutils/folder}
@item
@code{ant}
@item
The files @code{brailleUtils.jar} and @code{catalog.jar} will be created in @code{path/to/brailleutils/folder/ant-build/output/dist}.
@end itemize

@unnumberedsubsec Documentation

@itemize @minus
@item
@code{@url{javadoc/org/daisy/braille/package-summary.html,   org.daisy.braille}}
@itemize @minus
@item
@code{@url{javadoc/org/daisy/braille/embosser/package-summary.html,  org.daisy.braille.embosser}}
@item
@code{@url{javadoc/org/daisy/braille/facade/package-summary.html,    org.daisy.braille.facade}}
@item
@code{@url{javadoc/org/daisy/braille/pef/package-summary.html,       org.daisy.braille.pef}}
@item
@code{@url{javadoc/org/daisy/braille/table/package-summary.html,     org.daisy.braille.table}}
@item
@code{@url{javadoc/org/daisy/braille/tools/package-summary.html,     org.daisy.braille.tools}}
@item
@code{@url{javadoc/org/daisy/braille/ui/package-summary.html,        org.daisy.braille.ui}}
@end itemize
@item
@code{@url{javadoc/org/daisy/factory/package-summary.html,   org.daisy.factory}}
@item
@code{@url{javadoc/org/daisy/paper/package-summary.html,     org.daisy.paper}}
@item
@code{@url{javadoc/org/daisy/printing/package-summary.html,  org.daisy.printing}}
@item
@code{@url{javadoc/org/daisy/validator/package-summary.html, org.daisy.validator}}
@item
@code{@url{javadoc/com_braillo/package-summary.html,         com_braillo}}
@item
@code{@url{javadoc/com_indexbraille/package-summary.html,    com_indexbraille}}
@item
@code{@url{javadoc/com_yourdolphin/package-summary.html,     com_yourdolphin}}
@item
@code{@url{javadoc/de_brailletec/package-summary.html,       de_brailletec}}
@item
@code{@url{javadoc/org_daisy/package-summary.html,           org_daisy}}
@item
@code{@url{javadoc/se_tpb/package-summary.html,              se_tpb}}
@end itemize

@node Tutorials
@chapter Tutorials

@unnumberedsec Adding an embosser

To add support for an embosser, the protocol for giving print instructions to that embosser has to be known.
This includes e.g.
@itemize @bullet
@item
the configuration of the header which initiates the print job and gives general printing information,
@item
the way Braille pages and Braille lines are represented,
@item
the way each Braille character is represented (the character set),
@item
the footer which ends the print job, etc.
@end itemize

In addition, you should know the dimensions of cell spacing and line spacing, whether the embosser 
can print interpoint (duplex), which paper sizes are supported, etc.

Once the protocol is known, it can be implemented. What follows is a more or less general way of 
adapting the code in order to add an embosser. But because each embosser is different, extra
adjustments may have to be made.

@itemize @bullet
@item
In @code{org_pef_text.pef2text.EmbosserFactory}, expand the @code{EmbosserType} enumeration with
a new embosser type. Add a @code{case} for this new embosser type to the @code{switch} statement
in the @code{newEmbosser} function.
@item
Possibly, a new character set may have to be defined in @code{org_pef_text.TableFactory} as well.
Edit the @code{TableType} enumeration and the @code{newTable} function.
@item
Finally, in @code{be.docarch.odt2braille.Settings}, the functions 
@code{embosserIsSupported},
@code{changeEmbosser},
@code{tableIsSupported},
@code{paperSizeIsSupported}, 
@code{duplexIsSupported},
@code{eightDotsIsSupported} and
@code{changeEightDots}
need adjustments.
@end itemize

@unnumberedsec Building xml2brl on Windows

@unnumberedsec Texinfo & Javadoc

Texinfo:
@itemize @minus
@item
@code{cd path/to/odt2braille/folder/Odt2BrailleAddOn/doc}
@item
@code{
texi2dvi --pdf
@*@w{         }odt2braille-user-doc.texi}
@item
@code{
makeinfo --html
@*@w{        }[--no-split]
@*@w{        }[--no-headers]
@*@w{         }--output=odt2braille-user-doc.html
@*@w{         }odt2braille-user-doc.texi}

@end itemize	
			
Javadoc:
@itemize @minus
@item
@code{
javadoc [-private]
@*@w{        }[-author]
@*@w{        }[-version]
@*@w{        }[-breakiterator]
@*@w{         }-d path\to\odt2braille\folder\Odt2BrailleAddOn\doc\javadoc
@*@w{         }-subpackages be.docarch:org.daisy:com_braillo:com_indexbraille:com_yourdolphin:de_brailletec:org_daisy:se_tpb
@*@w{         }-sourcepath path\to\odt2braille\folder\Odt2BrailleAddOn\src;path\to\brailleutils\folder\src;path\to\brailleutils\folder\catalog
}
@end itemize

@unnumberedsec Adding translation tables

(volgorde, benaming, waarop letten, tabellen opslaan in ANSI, ...)

@unnumberedsec Adding hyphenation tables

@node Task list
@chapter Task list

@itemize @bullet
@item
More flexibility - provide more settings!
	@itemize @minus
	@item
	Footnotes, endnotes, transcriber's notes...
	@item
	Volume info and transcription info
	=> tags gebruiken die worden vervangen:
	<transcriber> = instelbaar
	<volumenaam> = instelbaar per volume
	<datum> <aantal volumes> <aantal supplementen> <aantal preliminaire volumes>
	<beginbraillepagina> <eindbraillepagina> <beginprintpagina> <eindprintpagina>
	@item
	'Continued' suffix.
	@item
	Tables
	@item
	Textboxes
	@item
	Images
	@item
	Table Of Contents:
		- headings tot level x weergeven ?
	@item
	Bibliography
	@item
	Special symbols: knop om default waarde van special symbol in te stellen => getDefaultSpecialSymbol(SpecialSymbolType type, String language)
	@end itemize
@item
Mac OS, Linux, ... !!! (wachten op Debian, Ubuntu, Fink)
@item
Support more embossers.
@item
Add more "Braille formatting standards" (UK, Zwitserland, België, Nederland ?)
@item
odt2braille_Formatting_Standards.odt: roodgekleurde regels zijn degene die nog niet ondersteund worden.
@item
Voor Ubuntu: OOo 3.2.1 nodig ?
@item
Volledige conversie (DOM + XSLT) vervangen door een reeks van kleinere XSLT's (eenvoudiger, sneller)
	* OK: Get languages
	* OK: Get styles
	*     Delete empty paragraphs, ... (don't delete paragraphs with a <pagenum> tag)
	*     Page numbering (=> Vincent Spiewak is rewriting JODL in XSLT 2.0 ?)
	*     List numbering & bullets
	*     Heading numbering
	*     Linking of captions (=> accessibility checker ?)
	* OK: Main
	*     Continued headings
	* OK: Special typeface + languages
	* OK: Split volumes
@item
DOM <-> STAX?
@item
Voor elke nieuwe release: kijken of liblouis zijn tabellen heeft geupdate.
@item
Voor elke nieuwe release: localisatie bijwerken
@item
AccessibilityChecker integration
@item
Settings in Tools > Options...
@item
Javadoc bijwerken.
@item
Test embossers.
@item
Tooltips in dialogs.
@item
Hidden paragraphs (or paragraphs in hidden sections) => transcriber's notes (braille-only material). TN => settings!
@item
Tactile graphics
@item
Music Braille
@item
If the liblouisxml process takes to long (e.g. with Chinese), OpenOffice.org might think the program is not responding.
@item
OpenOffice.org accessibility for screen readers (on Windows)?
@item
http://www.thessalonica.org.ru/en/index.html ?
@item
Check if the number of cells per line (and the number of lines per page) is sufficient (if too small, this might cause liblouisxml to fail).
@item
Java bindings?
@item
UTD & liblouisutdml?
@item
Presentations & spreadsheets.
@item
Commandline tool (Odt2Braille.jar).
@item
Uitleg van WinBraille over g0,g1,g2,...
	* g0 = one to one
	* g1 = literary one to one with capital and figure prefix
	* g2,g3,g4,... = contracted braille
@item
Grieks in Engelstalige tekst => +/- zoals in Spaans
@item
Automatic splitting of volumes
@item
Varia
	@itemize @minus
	@item
	text:list-item[@@text:style-override] ?
	@item
	Images are omitted in Braille if they are anchored to a page => alert?
	@item
	Pagenum inside notesection ?
	@item
	Footnotes onder tabel: ook footnotes in captions meegerekend (terwijl die al onder de caption zelf gezet zijn)
	@item
	als “Format – section – options – collect at end of section” niet expliciet wordt ingesteld
	=> “notes-configuration” mogelijk niet aanwezig => notesection in Braille soms op verkeerde plaats 
	(=> uitzoeken hoe OOo wel weet waar notes moeten staan ?)
	@item
	OOo: linking sections?	
	@item
	Volume information block: preliminary braille page numbers (p...) => p moet zonder letter indicator ?
	@item
	Underline: dots 7 & 8 ?
	@item
	Veranderen van typeface in midden van woord => documentatie
	@item
	Supplementary volumes:
		* pagenumber prefixed by “s” ?
		* 1st pagenum should be 1.
	@item
	Endnotes in preliminary pages: fix bug.
	@end itemize
@end itemize

@bye
