<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<project name="odt2braille" default="jar" basedir=".">
    <description>Builds, tests, and runs the project extension project.</description>
    <import file="nbproject/build-uno-impl.xml"/>
    <fail message="Please build using Ant 1.8.0 or higher.">
        <condition>
            <not>
                <antversion atleast="1.8.0"/>
            </not>
        </condition>
    </fail>

    <tstamp>
        <format property="ISO-TODAY" pattern="yyyy-MM-dd"/>
    </tstamp>
    
    <property name="project-name" value="odt2braille"/>
    <property name="release-version" value="0.1.1.rc10"/>


    <!-- override targets -->
    <target name="-pre-init" depends="-init-build,-copy-external-jars"/>
    <target name="-pre-compile" depends="-make-liblouis-dir,-build-core"/>
    <target name="-post-uno-package" depends="-rebuild-extension"/>

    <!-- override -post-test-run -->
    <target depends="init,compile-test,-pre-test-run,-do-test-run,-test-html-report" if="have.tests" name="-post-test-run">
        <fail if="tests.failed" unless="ignore.failing.tests">Some tests failed; see details above.</fail>
    </target>

    <!-- initialise -->
    <target name="-init-build"
        depends="-windows-properties,-macosx-properties,-linux-properties,-debian-properties">

        <pathconvert property="libs.OpenOffice.org 3.3.classpath">
            <path>
                <pathelement location="${java.dir}${file.separator}juh.jar"/>
                <pathelement location="${java.dir}${file.separator}jurt.jar"/>
                <pathelement location="${java.dir}${file.separator}ridl.jar"/>
                <pathelement location="${classes.dir}${file.separator}unoil.jar"/>
            </path>
        </pathconvert>

        <!-- don't compile core but include jar in classpath -->
        <mkdir dir="build/empty"/>
        <property name="src.core.dir" value="build/empty"/>
        <property name="core.jar" value="odt2braille-core.jar"/>
        <property name="dist.core.jar" value="dist${file.separator}${core.jar}"/>
        <property name="extend.javac.classpath" value=":${dist.core.jar}"/>

        <property file="nbproject/project.properties"/>
        <property file="nbproject/project-uno.properties"/>

        <property name="sdk.bin.dir"
                  value="${sdk.dir}${file.separator}bin"/>
        <property name="ure.bin.dir"
                  value="${ure.dir}${file.separator}bin"/>

        <pathconvert property="office.tool.path">
            <path>
                <pathelement location="${office.program.dir}"/>
                <pathelement location="${sdk.bin.dir}"/>
                <pathelement location="${basis.dir}${file.separator}program"/>
                <pathelement location="${ure.bin.dir}"/>
            </path>
        </pathconvert>

        <pathconvert property="project.home">
            <path path="."/>
        </pathconvert>

        <pathconvert property="core.classpath">
            <path path="${javac.classpath}"/>
            <firstmatchmapper>
                <globmapper from="*${core.jar}" to=""/>
                <globmapper from="*juh.jar"     to=""/>
            <globmapper from="*jurt.jar"    to=""/>
            <globmapper from="*ridl.jar"    to=""/>
            <globmapper from="*unoil.jar"   to=""/>
            <identitymapper/>
            </firstmatchmapper>
        </pathconvert>

        <pathconvert property="external.jars" pathsep=" " dirsep="/">
            <path path="${core.classpath}:${dist.core.jar}"/>
            <firstmatchmapper>
                <globmapper from="${project.home}${file.separator}${dist.core.jar}" to="${core.jar}"/>
                <chainedmapper>
                    <globmapper from="${project.home}${file.separator}*" to="*"/>
                    <flattenmapper/>
                    <globmapper from="*" to="lib/*"/>
                </chainedmapper>
                <globmapper from="/*" to="file:///*"/>
                <globmapper from="*" to="file:///*"/>
            </firstmatchmapper>
        </pathconvert>

        <available file="${dist.dir}${file.separator}${external.jar.dir}"
                   property="external.jar.dir.exists"/>
        <available file="${dist.dir}${file.separator}liblouis"
                   property="dist.liblouis.dir.exists"/>
    </target>
	
	
    <!-- load platform dependent properties -->
    <target name="-windows-properties" if="is.windows" depends="-detect-os">
        <property file="build.windows.properties"/>
    </target>

    <target name="-macosx-properties" if="is.macosx" depends="-detect-os">
        <property file="build.macosx.properties"/>
    </target>

    <target name="-linux-properties" if="is.linux" depends="-detect-os">
        <property file="build.linux.properties"/>
    </target>

    <target name="-debian-properties" if="is.debian" depends="-detect-os">
        <property file="build.debian.properties"/>
    </target>


    <!-- ask target.os as an input -->
    <target name="-prompt-target-os">
        <input message="Choose extension target platform:"
               validargs="${list.target.os}"
               addproperty="target.os" />

        <condition property="target.is.windows">
            <equals arg1="${target.os}" arg2="windows_x86"/>
        </condition>
        <condition property="target.is.macosx">
            <equals arg1="${target.os}" arg2="macosx_x86"/>
        </condition>
        <condition property="target.is.linux">
            <equals arg1="${target.os}" arg2="linux_x86"/>
        </condition>
    </target>
    
    
    <!-- detect os -->
    <target name="-detect-os">
        <condition property="is.windows">
            <os family="windows"/>
        </condition>
        <condition property="is.macosx">
           <and>
               <os family="mac"/>
               <os family="unix"/>
           </and>
        </condition>
        <condition property="is.linux">
            <and>
                <os family="unix"/>
                <not><os family="mac"/></not>
                <not><contains string="${os.name}" substring="debian" casesensitive="no"/></not>
            </and>
        </condition>
        <condition property="is.debian">
            <and>
                <os family="unix"/>
                <contains string="${os.name}" substring="debian" casesensitive="no"/>
            </and>
        </condition>
    </target>


    <!-- make external jars folder -->
    <target name="-copy-external-jars" depends="-init-build" unless="external.jar.dir.exists">
        <pathconvert property="core.classpath.space.sep" pathsep=" ">
            <path path="${core.classpath}"/>
            <map from="${project.home}${file.separator}" to=""/>
        </pathconvert>
        <mkdir dir="${dist.dir}${file.separator}${external.jar.dir}" />
        <copy todir="${dist.dir}${file.separator}${external.jar.dir}" flatten="true">
            <fileset dir="." includes="${core.classpath.space.sep}"/>
        </copy>
    </target>


    <!-- make liblouis folder -->
    <target name="-make-liblouis-dir" unless="dist.liblouis.dir.exists">
        <mkdir dir="${dist.dir}${file.separator}liblouis" />
        <antcall target="-copy-liblouis-files"/>
        <antcall target="-copy-liblouis-bin"/>
    </target>
    
    
    <!-- copy liblouis files -->
    <target name="-copy-liblouis-files">
        <copy todir="${dist.dir}${file.separator}liblouis${file.separator}files"
              flatten="true">
            <fileset dir="ext${file.separator}liblouis${file.separator}tables">
                <patternset>
                    <include name="**/*.ctb"/>
                    <include name="**/*.cti"/>
                    <include name="**/*.utb"/>
                    <include name="**/*.dis"/>
                    <include name="**/*.dic"/>
                </patternset>
            </fileset>
            <fileset dir="ext${file.separator}liblouisxml${file.separator}lbx_files">
                <patternset>
                    <include name="**/*.cfg"/>
                    <include name="**/*.sem"/>
                </patternset>
            </fileset>
        </copy>
    </target>
    

    <!-- copy liblouis binaries -->
    <target name="-copy-liblouis-bin"
            depends="-prompt-target-os,-copy-liblouis-bin-win,-copy-liblouis-bin-mac"/>
            
    
    <!-- copy windows binaries -->
    <target name="-copy-liblouis-bin-win" if="target.is.windows">
        <copy todir="${dist.dir}${file.separator}liblouis${file.separator}bin${file.separator}win">
            <fileset dir="ext${file.separator}liblouis${file.separator}bin">
                <filename name="*.dll"/>
            </fileset>
            <fileset dir="ext${file.separator}libxml2${file.separator}bin">
                <filename name="*.dll"/>
            </fileset>
            <fileset dir="ext${file.separator}liblouisxml${file.separator}bin">
                <patternset>
                    <include name="*.dll"/>
                    <include name="*.exe"/>
                </patternset>
            </fileset>
        </copy>
    </target>
	
	
    <!-- copy mac os binaries -->
    <target name="-copy-liblouis-bin-mac" if="target.is.macosx">
        <copy todir="${dist.dir}${file.separator}liblouis${file.separator}bin${file.separator}mac">
            <fileset dir="ext${file.separator}liblouis${file.separator}bin">
                <filename name="*.dylib"/>
            </fileset>
            <fileset dir="ext${file.separator}libxml2${file.separator}bin">
                <filename name="*.dylib"/>
            </fileset>
            <fileset dir="ext${file.separator}liblouisxml${file.separator}bin">
                <patternset>
                    <include name="*.dylib"/>
                    <include name="xml2brl"/>
                </patternset>
            </fileset>
        </copy>
    </target>


    <!-- build core jar -->
    <target name="-build-core">
        <property name="core.build.dir" value="${build.dir}/core-classes"/>
        <property name="core.src.dir" value="core"/>
        <delete dir="${core.build.dir}"/>
    	<mkdir dir="${core.build.dir}"/>
        
        <!-- compile -->
        <javac srcdir="${core.src.dir}" destdir="${core.build.dir}"
               includeantruntime="false" debug="true" encoding="UTF-8"
               source="${javac.source}" target="${javac.target}"
               includes="**" excludes="">
            <classpath>
                <path path="${core.classpath}"/>
            </classpath>
        </javac>
        
        <copy todir="${core.build.dir}">
            <fileset dir="${core.src.dir}">
                <patternset>
                    <include name="META-INF/**/*.*"/>
                    <include name="**/*.properties"/>
                    <include name="**/*.xsl"/>
                    <include name="**/*.xml"/>
                    <include name="**/*.rng"/>
                    <exclude name="**/*.java"/>
                </patternset>
            </fileset>
        </copy>
        
        <!-- build jar -->
        <jar destfile="${dist.core.jar}">
            <fileset dir="${core.build.dir}"/>
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="Built-On" value="${ISO-TODAY}"/>
                <attribute name="Implementation-Title" value="${project.name}"/>
                <attribute name="Implementation-Version" value="${release-version}"/>
                <attribute name="Implementation-URL" value="http://odt2braille.sourceforge.net"/>
            </manifest>
    	</jar>
    </target>
    

    <!-- rebuild extension with some fixes -->
    <target name="-rebuild-extension">

        <!-- unzip extension in a clean dir -->
        <delete dir="${build.oxt.dir}" />
        <mkdir dir="${build.oxt.dir}" />
        <unzip src="${uno.package.name}" dest="${build.oxt.dir}" />
  
        <!-- add templates folder -->
        <copy todir="${build.oxt.dir}${file.separator}${templates.dir}">
            <fileset dir="${templates.dir}" />
        </copy>

        <!-- add liblouis folder -->
        <copy todir="${build.oxt.dir}${file.separator}liblouis">
            <fileset dir="${dist.dir}${file.separator}liblouis" />
        </copy>

        <!-- add settings folder -->
        <copy todir="${build.oxt.dir}${file.separator}${settings.dir}">
            <fileset dir="${settings.dir}" />
        </copy>
		
        <!-- add licenses folder -->
        <copy todir="${build.oxt.dir}${file.separator}${licenses.dir}">
            <fileset dir="${licenses.dir}" />
        </copy>

        <!-- specify target in description.xml -->
        <delete file="${build.oxt.dir}${file.separator}description.xml" />
        <filter token="platform-oxt" value="${target.os}"/>
        <copy file="${src.dir}${file.separator}description.xml"
              tofile="${build.oxt.dir}${file.separator}description.xml"
              filtering="true" />

        <!-- zip the new extension addon -->
        <delete file="${uno.package.name}" />

        <zip destfile="${uno.package.name}"
             basedir="${build.oxt.dir}" />		
		
    </target>
	
	
	<!-- make html report from test results -->
    <target name="-test-html-report">
        <delete dir="${build.test.report.dir}"/>
        <mkdir dir="${build.test.report.dir}"/>
        <junitreport todir="${build.test.report.dir}">
            <fileset dir="${build.test.results.dir}">
                <include name="TEST-*.xml" />
            </fileset>
            <report todir="${build.test.report.dir}" />
        </junitreport>	
    </target>
	
</project>
