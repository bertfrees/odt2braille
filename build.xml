<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<project name="Odt2BrailleAddOn" default="default" basedir=".">
    <description>Builds, tests, and runs the project extension project.</description>
    <import file="nbproject/build-uno-impl.xml"/>
    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

      -pre-init:                 called before initialization of project properties
      -post-init:                called after initialization of project properties
      -pre-compile:              called before javac compilation
      -post-compile:             called after javac compilation
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-compile-test-single:  called before javac compilation of single JUnit test
      -post-compile-test-single: called after javac compilation of single JUunit test
      -pre-jar:                  called before JAR building
      -post-jar:                 called after JAR building
      -pre-uno-package:          called before OXT creation
      -post-uno-package:         called after OXT creation
      -post-clean:               called after cleaning build products

    (Targets beginning with '-' are not intended to be called on their own.)

    Example of inserting an obfuscator after compilation could look like this:

        <target name="-post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported 
    nbproject/build-impl.xml file. 


    Another way to customize the build is by overriding existing main targets.
    The targets of interest are: 

      -init-macrodef-javac:     defines macro for javac compilation
      -init-macrodef-junit:     defines macro for junit execution
      -init-macrodef-debug:     defines macro for class debugging
      -init-macrodef-java:      defines macro for class execution
      -do-jar-with-manifest:    JAR building (if you are using a manifest)
      -do-jar-without-manifest: JAR building (if you are not using a manifest)
      run:                      execution of project 
      -javadoc-build:           Javadoc generation
      test-report:              JUnit report generation

    An example of overriding the target for project execution could look like this:

        <target name="run" depends="TypeBrowser2-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that the overridden target depends on the jar target and not only on 
    the compile target as the regular run target does. Again, for a list of available 
    properties which you can use, check the target you are overriding in the
    nbproject/build-impl.xml file. 

    -->
    
	<!-- initialise -->
	<target name="-pre-init" depends="-init-build,-copy-external-jars"/>
	
	
	<target name="-init-build"
            depends="-windows-properties,-macosx-properties,-linux-properties,-debian-properties">
	
	    <pathconvert property="libs.OpenOffice.org 3.3.classpath">
	        <path>
	            <pathelement location="${java.dir}${file.separator}juh.jar"/>
	            <pathelement location="${java.dir}${file.separator}jurt.jar"/>
	            <pathelement location="${java.dir}${file.separator}ridl.jar"/>
	            <pathelement location="${classes.dir}${file.separator}unoil.jar"/>
	        </path>
	    </pathconvert>

	    <property file="nbproject/project.properties"/>
		<property file="nbproject/project-uno.properties"/>
	    
		<property name="sdk.bin.dir"
                  value="${sdk.dir}${file.separator}bin"/>
		<property name="ure.bin.dir"
                  value="${ure.dir}${file.separator}bin"/>
		
		<pathconvert property="office.tool.path">
		    <path>
	            <pathelement location="${office.program.dir}"/>
                <pathelement location="${sdk.bin.dir}"/>
                <pathelement location="${basis.dir}${file.separator}program"/>
                <pathelement location="${ure.bin.dir}"/>
            </path>
		</pathconvert>
        
        <pathconvert property="project.home">
	        <path path="."/>
	    </pathconvert>
		
		<pathconvert property="external.jars" pathsep=" " dirsep="/">
		    <path path="${javac.classpath}"/>
		    <firstmatchmapper>
		        <chainedmapper>
		            <globmapper from="${project.home}${file.separator}*" to="*"/>
                    <flattenmapper/>
                    <globmapper from="*" to="lib/*"/>
                </chainedmapper>
                <globmapper from="*juh.jar" to=""/>
	            <globmapper from="*jurt.jar" to=""/>
	            <globmapper from="*ridl.jar" to=""/>
	            <globmapper from="*unoil.jar" to=""/>
                <globmapper from="/*" to="file:///*"/>
	            <globmapper from="*" to="file:///*"/>
            </firstmatchmapper>
		</pathconvert>
	
		<available file="${dist.dir}${file.separator}${external.jar.dir}"
                   property="external.jar.dir.exists"/>
        <available file="${dist.dir}${file.separator}liblouis"
                   property="dist.liblouis.dir.exists"/>
	</target>
	
	
	<!-- load platform dependent properties -->
    <target name="-windows-properties" if="is.windows" depends="-detect-os">
	    <property file="build.windows.properties"/>
	</target>
	
	<target name="-macosx-properties" if="is.macosx" depends="-detect-os">
	    <property file="build.macosx.properties"/>
	</target>
	
	<target name="-linux-properties" if="is.linux" depends="-detect-os">
	    <property file="build.linux.properties"/>
	</target>
	
	<target name="-debian-properties" if="is.debian" depends="-detect-os">
	    <property file="build.debian.properties"/>
	</target>
	

    <!-- ask target.os as an input -->
    <target name="-prompt-target-os">
        <input message="Choose extension target platform:"
               validargs="${list.target.os}"
               addproperty="target.os" />

        <condition property="target.is.windows">
            <equals arg1="${target.os}" arg2="windows_x86"/>
        </condition>
        <condition property="target.is.macosx">
            <equals arg1="${target.os}" arg2="macosx_x86"/>
        </condition>
        <condition property="target.is.linux">
            <equals arg1="${target.os}" arg2="linux_x86"/>
        </condition>
    </target>
    
    <!-- detect os -->
    <target name="-detect-os">
		<condition property="is.windows">
            <os family="windows"/>
        </condition>
        <condition property="is.macosx">
           <and>
               <os family="mac"/>
               <os family="unix"/>
           </and>
        </condition>
        <condition property="is.linux">
            <and>
                <os family="unix"/>
                <not><os family="mac"/></not>
                <not><contains string="${os.name}" substring="debian" casesensitive="no"/></not>
            </and>
        </condition>
        <condition property="is.debian">
            <and>
                <os family="unix"/>
                <contains string="${os.name}" substring="debian" casesensitive="no"/>
            </and>
        </condition>
	</target>


    <!-- make external jars folder -->
    <target name="-copy-external-jars" depends="-init-build" unless="external.jar.dir.exists">	
		<pathconvert property="javac.classpath.space.sep" pathsep=" ">
			<path path="${javac.classpath}"/>
			<map from="${project.home}${file.separator}" to=""/>
		</pathconvert>
		<mkdir dir="${dist.dir}${file.separator}${external.jar.dir}" />
		<copy todir="${dist.dir}${file.separator}${external.jar.dir}" flatten="true">
			<fileset dir="." includes="${javac.classpath.space.sep}" />
		</copy>
	</target>


    <!-- make liblouis folder -->
    <target name="-post-compile" unless="dist.liblouis.dir.exists">
        <mkdir dir="${dist.dir}${file.separator}liblouis" />
        <antcall target="-copy-liblouis-files"/>
        <antcall target="-copy-liblouis-bin"/>
    </target>
    
    
    <!-- copy liblouis files -->
    <target name="-copy-liblouis-files">
        <copy todir="${dist.dir}${file.separator}liblouis${file.separator}files"
              flatten="true">
            <fileset dir="ext${file.separator}liblouis${file.separator}tables">
                <patternset>
                    <include name="**/*.ctb"/>
                    <include name="**/*.cti"/>
                    <include name="**/*.utb"/>
                    <include name="**/*.dis"/>
                    <include name="**/*.dic"/>
                </patternset>
            </fileset>
            <fileset dir="ext${file.separator}liblouisxml${file.separator}lbx_files">
                <patternset>
                    <include name="**/*.cfg"/>
                    <include name="**/*.sem"/>
                </patternset>
            </fileset>
        </copy>
    </target>
    

    <!-- copy liblouis binaries -->
    <target name="-copy-liblouis-bin"
            depends="-prompt-target-os,-copy-liblouis-bin-win,-copy-liblouis-bin-mac"/>
            
    
    <!-- copy windows binaries -->
    <target name="-copy-liblouis-bin-win" if="target.is.windows">
        <copy todir="${dist.dir}${file.separator}liblouis${file.separator}bin${file.separator}win">
            <fileset dir="ext${file.separator}liblouis${file.separator}bin">
                <filename name="*.dll"/>
            </fileset>
            <fileset dir="ext${file.separator}libxml2${file.separator}bin">
                <filename name="*.dll"/>
            </fileset>
            <fileset dir="ext${file.separator}liblouisxml${file.separator}bin">
                <patternset>
                    <include name="*.dll"/>
                    <include name="*.exe"/>
                </patternset>
            </fileset>
        </copy>
    </target>
	
    <!-- copy mac os binaries -->
    <target name="-copy-liblouis-bin-mac" if="target.is.macosx">
        <copy todir="${dist.dir}${file.separator}liblouis${file.separator}bin${file.separator}mac">
            <fileset dir="ext${file.separator}liblouis${file.separator}bin">
                <filename name="*.dylib"/>
            </fileset>
            <fileset dir="ext${file.separator}libxml2${file.separator}bin">
                <filename name="*.dylib"/>
            </fileset>
            <fileset dir="ext${file.separator}liblouisxml${file.separator}bin">
                <patternset>
                    <include name="*.dylib"/>
                    <include name="xml2brl"/>
                </patternset>
            </fileset>
        </copy>
    </target>


    <!-- rebuild extension with some fixes -->
    <target name="-post-uno-package">

        <!-- unzip extension in a clean dir -->
        <delete dir="${build.oxt.dir}" />
        <mkdir dir="${build.oxt.dir}" />
        <unzip src="${uno.package.name}" dest="${build.oxt.dir}" />

        <!-- add templates folder -->
        <copy todir="${build.oxt.dir}${file.separator}${templates.dir}">
            <fileset dir="${templates.dir}" />
        </copy>

        <!-- add liblouis folder -->
        <copy todir="${build.oxt.dir}${file.separator}liblouis">
            <fileset dir="${dist.dir}${file.separator}liblouis" />
        </copy>

        <!-- add settings folder -->
        <copy todir="${build.oxt.dir}${file.separator}${settings.dir}">
            <fileset dir="${settings.dir}" />
        </copy>
		
        <!-- add licenses folder -->
        <copy todir="${build.oxt.dir}${file.separator}${licenses.dir}">
            <fileset dir="${licenses.dir}" />
        </copy>

        <!-- specify target in description.xml -->
        <delete file="${build.oxt.dir}${file.separator}description.xml" />
        <filter token="platform-oxt" value="${target.os}"/>
        <copy file="${src.dir}${file.separator}description.xml"
              tofile="${build.oxt.dir}${file.separator}description.xml"
              filtering="true" />

        <!-- zip the new extension addon -->
        <delete file="${uno.package.name}" />

        <zip destfile="${project.dir}${file.separator}${dist.dir}${file.separator}${project.name}.oxt"
             basedir="${build.oxt.dir}" />
             
    </target>
</project>
