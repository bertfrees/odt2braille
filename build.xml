<?xml version="1.0" encoding="UTF-8"?>
<project name="odt2braille" default="jar" basedir="."
         xmlns:j2seproject3="http://www.netbeans.org/ns/j2se-project/3">

    <description>Builds, tests, and runs the project extension project.</description>

    <fail message="Please build using Ant 1.8.0 or higher.">
        <condition><not><antversion atleast="1.8.0"/></not></condition>
    </fail>


<!--
  /- ===========================================================================
  /- MAIN TARGETS
  /- ===========================================================================
  /-->

    <!-- Hook target for NetBeans.
         'core-jar' can be changed into something else, depending on what you
         want to happen when you click 'Build' -->
    <target name="jar"
            description="Hook target for NetBeans"
            depends="core-jar" />

    <target name="uno-package"
            description="Create UNO extension package"
            depends="addon-jar,images,registry,-delete-uno-package,-pre-uno-package,-do-uno-package,-post-uno-package"/>

    <target name="uno-run"
            description="Run UNO extension package in OpenOffice.org"
            depends="uno-package,-run-oo"/>

    <target name="addon-jar"
            description="Build addon JAR"
            depends="-uno-project-init,uno-idl-compile,-jar-idl-types,core-jar,compile,-pre-jar,-do-openoffice-manifest,-post-jar,-do-addon-jar" />

    <target name="core-jar"
            description="Build core JAR"
            depends="init,-make-liblouis-dir,-build-core" />

    <target name="tools-jar"
            description="Build tools JAR"
            depends="core-jar,-build-tools"/>

    <target name="addon-zip"
            description="Make a ZIP that includes the extension file and the odt2braille fonts (TODO)"/>

    <target name="tools-zip"
            description="Make a ZIP that includes the tools JAR, the lib folder and the liblouis folder"
            depends="tools-jar,-zip-tools"/>

    <target name="javadoc"
            description="Build Javadoc"
            depends="init,-javadoc-build" />

    <target name="test"
            description="Run unit tests"
            depends="init,-make-liblouis-dir,compile-test,-pre-test-run,-do-test-run,-test-report,-post-test-run" />

    <target name="compile"
            description="Compile project"
            depends="init,deps-jar,-verify-automatic-build,-pre-pre-compile,-pre-compile,-do-compile,-post-compile" />

    <target name="l10n"
            description="Re-encode localisation files">
        <ant dir="l10n" inheritAll="false" />
    </target>

    <target name="doc"
            description="Build user and developer documentation"
            depends="-build-documentation"/>

    <!-- TODO: licenses build.xml bestand en header bestanden uit licences folder verwijderen -->
    <target name="licenses"
            description="Add license headers">
        <ant dir="licenses" inheritAll="false" />
    </target>

    <target name="clean"
            description="Clean build products"
            depends="init,deps-clean,-do-clean,-post-clean" />

    <target name="braille-utils"
            description="Build brailleutils JARs"
            depends="-load-properties">
        <fail unless="brailleUtils.src.dir">Must set brailleUtils.src.dir property</fail>
        <ant dir="${brailleUtils.src.dir}" inheritAll="false" />
    </target>


<!--
  /- =======================================================================
  /- OVERRIDE TARGETS         TODO: get rid of this !
  /- =======================================================================
  /-->


    <target name="-pre-init" depends="-init-build"/>
    <target name="-pre-compile"/>
    <target name="-post-uno-package" depends="-rebuild-extension"/>
    <target name="-profile-post-init"/>
    <target name="-profile-pre-init"/>
    <target name="-post-init"/>
    <target name="-pre-uno-package"/>
    <target name="-post-compile"/>
    <target name="-post-jar"/>
    <target name="-pre-jar"/>
    <target name="-post-compile-test"/>
    <target name="-pre-compile-test"/>
    <target name="-post-clean"/>


<!--
  /- =======================================================================
  /- PROPERTIES                                                         
  /- =======================================================================
  /-->


    <target name="-properties" depends="-load-properties,
                                        -platform-properties,
                                        -common-properties"/>

    <!-- load properties from file -->
    <target name="-load-properties">
        <property name="properties.file" value="build.properties"/>
        <property file="${properties.file}"/>
    </target>

    <!-- platform dependent properties -->
    <target name="-platform-properties"
            depends="-windows-properties,-mac-properties,-linux-properties"/>

    <!-- common properties -->
    <target name="-common-properties">

        <property name="project.name" value="odt2braille"/>
        <property name="release.version" value="0.1.2.rc1"/>

        <pathconvert property="project.home"><path path="."/></pathconvert>

        <tstamp><format property="ISO-TODAY" pattern="yyyy-MM-dd"/></tstamp>

        <property name="core.jar" value="odt2braille.jar"/>
        <property name="addon.jar" value="odt2braille-addon.jar"/>
        <property name="tools.jar" value="odt2braille-tools.jar"/>
        <property name="tools.zip" value="odt2braille.zip"/>

        <property name="src.core.dir" value="core"/>
        <property name="src.addon.dir" value="addon"/>
        <property name="src.tools.dir" value="tools"/>
        <property name="test.src.dir" value="test"/>
        <property name="images.dir" value="images"/>
        <property name="registry.dir" value="registry"/>
        <property name="help.dir" value="help"/>
        <property name="dialogs.dir" value="dialogs"/>
        <property name="licenses.dir" value="licenses"/>
        <property name="templates.dir" value="templates"/>
        <property name="settings.dir" value="settings"/>
        <property name="description.dir" value="description"/>
        <property name="meta.inf.dir" value="${src.addon.dir}/META-INF"/>

        <property name="dist.dir" value="dist"/>
        <property name="dist.core.jar" value="${dist.dir}/lib/${core.jar}"/>
        <property name="dist.addon.jar" value="${dist.dir}/${addon.jar}"/>
        <property name="dist.tools.jar" value="${dist.dir}/${tools.jar}"/>
        <property name="dist.tools.zip" value="${dist.dir}/${tools.zip}"/>
        <property name="dist.javadoc.dir" value="${dist.dir}/javadoc"/>

        <!-- TODO: dist/lib folder niet kopiÃ«ren naar .oxt indien core.deploy.dir isset -->
        <pathconvert property="core.deploy.dir"><path path="${dist.dir}/lib"/></pathconvert>

        <property name="build.dir" value="build"/>
        <property name="build.addon.classes.dir" value="${build.dir}/addon-classes"/>
        <property name="build.core.classes.dir" value="${build.dir}/core-classes"/>
        <property name="build.tools.classes.dir" value="${build.dir}/tools-classes"/>
        <property name="build.oxt.dir" value="${build.dir}/oxt"/>
        <property name="build.test.classes.dir" value="${build.dir}/test/classes"/>
        <property name="build.test.results.dir" value="${build.dir}/test/results"/>
        <property name="build.test.report.dir" value="${build.dir}/test/report"/>
        <property name="build.generated.dir" value="${build.dir}/generated"/>
        <property name="build.generated.sources.dir" value="${build.dir}/generated-sources"/>

        <property name="javac.deprecation" value="false"/>
        <property name="javac.source" value="1.5"/>
        <property name="javac.target" value="1.5"/>

        <property name="build.classes.excludes" value="**/*.java,**/*.form,**/*.xcu,**/*.xcs,**/*.idl,**/*manifest.xml"/>
        <property name="endorsed.classpath" value=""/>
        <property name="excludes" value=""/>
        <property name="includes" value="**"/>

        <property name="sdk.bin.dir" value="${sdk.dir}/bin"/>
        <property name="ure.bin.dir" value="${ure.dir}/bin"/>
        <property name="office.tool.path" value="${office.program.dir}:${sdk.bin.dir}:${basis.dir}/program:${ure.bin.dir}"/>

        <property name="uno.project.type" value="office.addon.project"/>
        <property name="registration.classname" value="be.docarch.odt2braille.ooo.Odt2BrailleAddOn"/>
        <property name="idl_types.jar" value="Odt2BrailleAddOn_IDL_types.jar"/>
        <property name="central.registration.class" value="be.docarch.odt2braille.ooo.CentralRegistrationClass"/>
        <property name="manifest.package.extensions" value="**/*.xcu,**/*.xcs,**/*.xdl,**/*.xlb,**/*.xba,**/*.default"/>
        <property name="image.extensions" value="**/*.png,**/*.jpg,**/*.jpeg,**/*.gif"/>
        <property name="help.content.extensions" value="**/*.xhp,**/*.tree,${image.extensions}"/>
        <property name="dialog.content.extensions" value="**/*.xdl,**/*.properties,**/*.default,${image.extensions}"/>
        <property name="office.startup.options" value=""/>

        <property name="javadoc.additionalparam" value=""/>
        <property name="javadoc.author" value="false"/>
        <property name="javadoc.encoding" value=""/>
        <property name="javadoc.noindex" value="false"/>
        <property name="javadoc.nonavbar" value="false"/>
        <property name="javadoc.notree" value="false"/>
        <property name="javadoc.private" value="false"/>
        <property name="javadoc.splitindex" value="true"/>
        <property name="javadoc.use" value="true"/>
        <property name="javadoc.version" value="false"/>
        <property name="javadoc.windowtitle" value=""/>

        <property name="build.doc.dir" value="doc/build"/>
        <property name="doc.lang" value="en"/>
        <property name="user.doc" value="odt2braille-user-doc"/>
        <property name="dev.doc" value="odt2braille-dev-doc"/>

        <!-- default file references -->
        <property name="brailleUtils-core.jar" value="lib/brailleUtils-core-1.2b.jar"/>
        <property name="brailleUtils-catalog.jar" value="lib/brailleUtils-catalog-1.2b.jar"/>
        <property name="accessodf.jar" value="lib/accessodf.jar"/>
        <property name="commons-io.jar" value="lib/commons-io-1.4.jar"/>
        <property name="saxon.jar" value="lib/saxon9he.jar"/>
        <property name="xalan.jar" value="lib/xalan.jar"/>
        <property name="ant.jar" value="lib/ant.jar"/>
        <property name="junit.jar" value="lib/junit-4.4.jar"/>
        <property name="xmlunit.jar" value="lib/xmlunit-1.2.jar"/>
    </target>

    <!-- windows -->
    <target name="-windows-properties" if="is.windows" depends="-detect-os">
        <property name="target.os" value="windows_x86"/>
        <fail if="core.deploy.dir">core.deploy.dir property not supported on Windows</fail>
        <fail unless="oo.dir">Must set oo.dir property</fail>
        <fail if="basis.dir">basis.dir property cannot be set manually on Windows</fail>
        <fail if="ure.dir">ure.dir property cannot be set manually on Windows</fail>
        <fail if="java.dir">java.dir property cannot be set manually on Windows</fail>
        <fail if="classes.dir">classes.dir property cannot be set manually on Windows</fail>
        <fail if="office.program.dir">office.program.dir property cannot be set manually on Windows</fail>
        <property name="basis.dir" value="${oo.dir}${file.separator}Basis"/>
        <property name="ure.dir" value="${oo.dir}${file.separator}URE"/>
        <property name="java.dir" value="${ure.dir}${file.separator}java"/>
        <property name="classes.dir"
                  value="${basis.dir}${file.separator}program${file.separator}classes"/>
        <property name="office.program.dir"
                  value="${oo.dir}${file.separator}program"/>
        <property name="oo.unotypes.rdb"
                  value="-X${ure.dir}${file.separator}misc${file.separator}types.rdb"/>
        <property name="oo.offapi.rdb"
                  value="-X${basis.dir}${file.separator}program${file.separator}offapi.rdb"/>
    </target>

    <!-- mac os -->
    <target name="-mac-properties" if="is.mac" depends="-detect-os">
        <property name="target.os" value="macosx_x86"/>
        <fail if="core.deploy.dir">core.deploy.dir property not supported on Mac</fail>
        <fail unless="oo.dir">Must set oo.dir property</fail>
        <fail if="basis.dir">basis.dir property cannot be set manually on Mac</fail>
        <fail if="ure.dir">ure.dir property cannot be set manually on Mac</fail>
        <fail if="java.dir">java.dir property cannot be set manually on Mac</fail>
        <fail if="classes.dir">classes.dir property cannot be set manually on Mac</fail>
        <fail if="office.program.dir">office.program.dir property cannot be set manually on Mac</fail>
        <property name="basis.dir"
                  value="${oo.dir}${file.separator}basis-link"/>
        <property name="ure.dir"
                  value="${basis.dir}${file.separator}ure-link"/>
        <property name="java.dir"
                  value="${ure.dir}${file.separator}share${file.separator}java"/>
        <property name="classes.dir"
                  value="${basis.dir}${file.separator}program${file.separator}classes"/>
        <property name="office.program.dir"
                  value="${oo.dir}${file.separator}MacOS"/>
        <property name="oo.unotypes.rdb"
                  value="-X${ure.dir}${file.separator}share${file.separator}misc${file.separator}types.rdb"/>
        <property name="oo.offapi.rdb"
                  value="-X${basis.dir}${file.separator}program${file.separator}offapi.rdb"/>
    </target>

    <!-- linux -->
    <target name="-linux-properties" if="is.linux" depends="-detect-os">
        <property name="target.os" value="linux_x86"/>
        <fail if="oo.dir">oo.dir property not supported on Linux</fail>
        <fail unless="basis.dir">Must set basis.dir property</fail>
        <fail unless="ure.dir">Must set ure.dir property</fail>
        <fail unless="java.dir">Must set java.dir property</fail>
        <fail unless="classes.dir">Must set classes.dir property</fail>
        <fail unless="office.program.dir">Must set office.program.dir property</fail>
        <property name="oo.unotypes.rdb"
                  value="-X${ure.dir}${file.separator}share${file.separator}misc${file.separator}types.rdb"/>
        <property name="oo.offapi.rdb"
                  value="-X${basis.dir}${file.separator}program${file.separator}offapi.rdb"/>
    </target>

    <!-- detect os -->
    <target name="-detect-os">
        <condition property="is.windows">
            <os family="windows"/>
        </condition>
        <condition property="is.mac">
           <and>
               <os family="mac"/>
               <os family="unix"/>
           </and>
        </condition>
        <condition property="is.linux">
            <and>
                <os family="unix"/>
                <not><os family="mac"/></not>
            </and>
        </condition>
    </target>


<!--
  /- =======================================================================
  /- COPY (EMBED) DEPENDENCY JARS                                                        
  /- =======================================================================
  /-->


    <target name="-copy-jars"
            depends="-init-copy-jars,
                     -copy-brailleUtils-jars-from-src-dir,
                     -copy-brailleUtils-core-jar,
                     -copy-brailleUtils-catalog-jar,
                     -copy-accessodf-jar,
                     -copy-commons-io-jar,
                     -copy-saxon-jar,
                     -copy-xalan-jar"/>

    <target name="-init-copy-jars">

        <delete dir="${dist.dir}/lib"/>
        <mkdir dir="${dist.dir}/lib"/>

        <condition property="brailleUtils-core.jar.is.relative">
            <not><matches pattern="^\/.*" string="${brailleUtils-core.jar}"/></not>
        </condition>
        <condition property="brailleUtils-catalog.jar.is.relative">
            <not><matches pattern="^\/.*" string="${brailleUtils-catalog.jar}"/></not>
        </condition>
        <condition property="accessodf.jar.is.relative">
            <not><matches pattern="^\/.*" string="${accessodf.jar}"/></not>
        </condition>
        <condition property="commons-io.jar.is.relative">
            <not><matches pattern="^\/.*" string="${commons-io.jar}"/></not>
        </condition>
        <condition property="saxon.jar.is.relative">
            <not><matches pattern="^\/.*" string="${saxon.jar}"/></not>
        </condition>
        <condition property="xalan.jar.is.relative">
            <not><matches pattern="^\/.*" string="${xalan.jar}"/></not>
        </condition>

    </target>

    <target name="-copy-brailleUtils-jars-from-src-dir" if="brailleUtils.src.dir">
        <copy todir="${dist.dir}/lib" flatten="true">
            <path>
                <pathelement location="${brailleUtils.src.dir}/ant-build/output/dist/brailleUtils-core-1.2b.jar"/>
                <pathelement location="${brailleUtils.src.dir}/ant-build/output/dist/brailleUtils-catalog-1.2b.jar"/>
                <pathelement location="${brailleUtils.src.dir}/lib/isorelax.jar"/>
                <pathelement location="${brailleUtils.src.dir}/lib/jing.jar"/>
                <pathelement location="${brailleUtils.src.dir}/lib/wstx-lgpl-3.2.8.jar"/>
                <pathelement location="${brailleUtils.src.dir}/lib/xercesImpl.jar"/>
                <pathelement location="${brailleUtils.src.dir}/lib/xml-apis.jar"/>
                <pathelement location="${brailleUtils.src.dir}/lib/stax-api-1.0.1.jar"/>
            </path>
        </copy>
        <property name="path.brailleUtils-core"    value="${dist.dir}/lib/brailleUtils-core-1.2b.jar"/>
        <property name="path.brailleUtils-catalog" value="${dist.dir}/lib/brailleUtils-catalog-1.2b.jar"/>
    </target>

    <target name="-copy-brailleUtils-core-jar"
            unless="brailleUtils.src.dir"
            if="brailleUtils-core.jar.is.relative">
        <copy todir="${dist.dir}/lib" flatten="true">
            <path>
                <pathelement location="${brailleUtils-core.jar}"/>
                <pathelement location="lib/isorelax.jar"/>
                <pathelement location="lib/jing.jar"/>
                <pathelement location="lib/wstx-lgpl-3.2.8.jar"/>
                <pathelement location="lib/xercesImpl.jar"/>
                <pathelement location="lib/xml-apis.jar"/>
                <pathelement location="lib/stax-api-1.0.1.jar"/>
            </path>
        </copy>
        <basename file="${brailleUtils-core.jar}" property="brailleUtils-core.basename"/>
        <property name="brailleUtils-core.path" value="${dist.dir}/lib/${brailleUtils-core.basename}"/>
    </target>

    <target name="-copy-brailleUtils-catalog-jar"
            unless="brailleUtils.src.dir"
            if="brailleUtils-catalog.jar.is.relative">
        <copy todir="${dist.dir}/lib" file="${brailleUtils-catalog.jar}"/>
        <basename file="${brailleUtils-catalog.jar}" property="brailleUtils-catalog.basename"/>
        <property name="path.brailleUtils-catalog" value="${dist.dir}/lib/${brailleUtils-catalog.basename}"/>
    </target>

    <target name="-copy-accessodf-jar" if="accessodf.jar.is.relative">
        <copy todir="${dist.dir}/lib" file="${accessodf.jar}"/>
        <basename file="${accessodf.jar}" property="accessodf.basename"/>
        <property name="path.accessodf" value="${dist.dir}/lib/${accessodf.basename}"/>
    </target>

    <target name="-copy-commons-io-jar" if="commons-io.jar.is.relative">
        <copy todir="${dist.dir}/lib" file="${commons-io.jar}"/>
        <basename file="${commons-io.jar}" property="commons-io.basename"/>
        <property name="path.commons-io" value="${dist.dir}/lib/${commons-io.basename}"/>
    </target>

    <target name="-copy-saxon-jar" if="saxon.jar.is.relative">
        <copy todir="${dist.dir}/lib" file="${saxon.jar}"/>
        <basename file="${saxon.jar}" property="saxon.basename"/>
        <property name="path.saxon" value="${dist.dir}/lib/${saxon.basename}"/>
    </target>

    <target name="-copy-xalan-jar" if="xalan.jar.is.relative">
        <copy todir="${dist.dir}/lib" file="${xalan.jar}"/>
        <basename file="${xalan.jar}" property="xalan.basename"/>
        <property name="path.xalan" value="${dist.dir}/lib/${xalan.basename}"/>
    </target>


<!--
  /- =======================================================================
  /- MAKE LIBLOUIS FOLDER                                                       
  /- =======================================================================
  /-->


    <target name="-init-liblouis-dir">
        <available file="${dist.dir}${file.separator}liblouis"
                   property="liblouis.dir.exists"/>
        <condition property="target.is.windows">
            <equals arg1="${target.os}" arg2="windows_x86"/>
        </condition>
        <condition property="target.is.macosx">
            <equals arg1="${target.os}" arg2="macosx_x86"/>
        </condition>
    </target>

    <!-- make liblouis folder -->
    <target name="-make-liblouis-dir"
            depends="-init-liblouis-dir"
            unless="liblouis.dir.exists">
        <mkdir dir="${dist.dir}${file.separator}liblouis" />
        <antcall target="-copy-liblouis-files"/>
        <antcall target="-copy-liblouis-bin"/>
    </target>

    <!-- copy liblouis files -->
    <target name="-copy-liblouis-files">
        <copy todir="${dist.dir}${file.separator}liblouis${file.separator}files"
              flatten="true">
            <fileset dir="tables${file.separator}liblouis${file.separator}tables">
                <patternset>
                    <include name="**/*.ctb"/>
                    <include name="**/*.cti"/>
                    <include name="**/*.utb"/>
                    <include name="**/*.dis"/>
                    <include name="**/*.dic"/>
                </patternset>
            </fileset>
            <fileset dir="tables${file.separator}liblouisxml${file.separator}lbx_files">
                <patternset>
                    <include name="**/*.cfg"/>
                    <include name="**/*.sem"/>
                </patternset>
            </fileset>
        </copy>
    </target>

    <!-- copy liblouis binaries -->
    <target name="-copy-liblouis-bin" depends="-copy-liblouis-bin-win,
                                               -copy-liblouis-bin-mac"/>

    <!-- copy liblouis windows binaries -->
    <target name="-copy-liblouis-bin-win" if="target.is.windows">
        <copy todir="${dist.dir}${file.separator}liblouis${file.separator}bin">
            <fileset dir="ext${file.separator}liblouis${file.separator}bin">
                <filename name="*.dll"/>
            </fileset>
            <fileset dir="ext${file.separator}libxml2${file.separator}bin">
                <filename name="*.dll"/>
            </fileset>
            <fileset dir="ext${file.separator}liblouisxml${file.separator}bin">
                <patternset>
                    <include name="*.dll"/>
                    <include name="*.exe"/>
                </patternset>
            </fileset>
        </copy>
    </target>

    <!-- copy liblouis mac os binaries -->
    <target name="-copy-liblouis-bin-mac" if="target.is.macosx">
        <copy todir="${dist.dir}${file.separator}liblouis${file.separator}bin">
            <fileset dir="ext${file.separator}liblouis${file.separator}bin">
                <filename name="*.dylib"/>
            </fileset>
            <fileset dir="ext${file.separator}libxml2${file.separator}bin">
                <filename name="*.dylib"/>
            </fileset>
            <fileset dir="ext${file.separator}liblouisxml${file.separator}bin">
                <patternset>
                    <include name="*.dylib"/>
                    <include name="xml2brl"/>
                </patternset>
            </fileset>
        </copy>
    </target>


<!--
  /- =======================================================================
  /- BUILD                                                         
  /- =======================================================================
  /-->


    <target name="-init-build"
            depends="-properties,-copy-jars">

        <property name="path.brailleUtils-core" value="${brailleUtils-core.jar}"/>
        <property name="path.brailleUtils-catalog" value="${brailleUtils-catalog.jar}"/>
        <property name="path.accessodf" value="${accessodf.jar}"/>
        <property name="path.commons-io" value="${commons-io.jar}"/>
        <property name="path.saxon" value="${saxon.jar}"/>
        <property name="path.xalan" value="${xalan.jar}"/>

        <!-- javac classpath -->

        <path id="core.classpath">
            <pathelement location="${path.accessodf}"/>
            <pathelement location="${path.commons-io}"/>
            <pathelement location="${path.saxon}"/>
            <pathelement location="${path.xalan}"/>
            <pathelement location="${path.brailleUtils-catalog}"/>
            <pathelement location="${path.brailleUtils-core}"/>
        </path>

        <path id="openoffice.classpath">
            <pathelement location="${java.dir}/juh.jar"/>
            <pathelement location="${java.dir}/jurt.jar"/>
            <pathelement location="${java.dir}/ridl.jar"/>
            <pathelement location="${classes.dir}/unoil.jar"/>
        </path>

        <path id="addon.classpath">
            <pathelement location="${build.core.classes.dir}"/>
            <path refid="core.classpath"/>
            <path refid="openoffice.classpath"/>
        </path>

        <path id="tools.classpath">
            <path location="${build.core.classes.dir}"/>
            <path refid="core.classpath"/>
            <pathelement location="${ant.jar}"/>
        </path>

        <path id="test.classpath">
            <path location="${build.core.classes.dir}"/>
            <path refid="core.classpath"/>
            <pathelement location="${junit.jar}"/>
            <pathelement location="${xmlunit.jar}"/>
        </path>

        <pathconvert property="javac.addon.classpath"
                     refid="addon.classpath" pathsep=":" dirsep="/"/>

        <pathconvert property="javac.test.classpath"
                     refid="test.classpath" pathsep=":" dirsep="/"/>

        <property name="run.test.classpath"
                  value="${javac.test.classpath}:${build.test.classes.dir}"/>

        <!-- manifest's classpath attribute -->

        <pathconvert property="core.manifest.classpath" pathsep=" " dirsep="/">
            <path refid="core.classpath"/>
            <firstmatchmapper>
                <globmapper from="${core.deploy.dir}/*" to="*"/>
                <globmapper from="${project.home}/${dist.dir}/lib/*" to="*" handledirsep="yes" />
                <globmapper from="/*" to="file:///*"/>
                <globmapper from="*" to="file:///*"/>
            </firstmatchmapper>
        </pathconvert>

        <pathconvert property="addon.manifest.classpath" pathsep=" " dirsep="/">
            <path path="${core.deploy.dir}/${core.jar}"/>
            <firstmatchmapper>
                <globmapper from="${project.home}/${dist.dir}/*" to="*" handledirsep="yes" />
                <globmapper from="/*" to="file:///*"/>
                <globmapper from="*" to="file:///*"/>
            </firstmatchmapper>
        </pathconvert>

        <pathconvert property="tools.manifest.classpath" pathsep=" " dirsep="/">
            <path path="${core.deploy.dir}/${core.jar}"/>
            <firstmatchmapper>
                <globmapper from="${project.home}/${dist.dir}/*" to="*" handledirsep="yes" />
                <globmapper from="/*" to="file:///*"/>
                <globmapper from="*" to="file:///*"/>
            </firstmatchmapper>
        </pathconvert>

    </target>

    <!-- compile core -->
    <target name="-compile-core" depends="-init-build">
        <delete dir="${build.core.classes.dir}"/>
        <mkdir dir="${build.core.classes.dir}"/>
        <javac srcdir="${src.core.dir}" destdir="${build.core.classes.dir}"
               includeantruntime="false" debug="true" encoding="UTF-8"
               source="${javac.source}" target="${javac.target}"
               includes="**" excludes="">
            <classpath refid="core.classpath"/>
        </javac>
        <copy todir="${build.core.classes.dir}">
            <fileset dir="${src.core.dir}">
                <patternset>
                    <include name="META-INF/**/*.*"/>
                    <include name="**/*.properties"/>
                    <include name="**/*.xsl"/>
                    <include name="**/*.xml"/>
                    <include name="**/*.rng"/>
                    <exclude name="**/*.java"/>
                </patternset>
            </fileset>
        </copy>
    </target>

    <!-- build core jar -->
    <target name="-build-core" depends="-compile-core">
        <delete file="${dist.core.jar}"/>
        <jar destfile="${dist.core.jar}">
            <fileset dir="${build.core.classes.dir}"/>
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="Built-On" value="${ISO-TODAY}"/>
                <attribute name="Implementation-Title" value="${project.name}"/>
                <attribute name="Implementation-Version" value="${release.version}"/>
                <attribute name="Implementation-URL" value="http://odt2braille.sourceforge.net"/>
                <attribute name="Class-Path" value="${core.manifest.classpath}"/>
            </manifest>
        </jar>
    </target>

    <!-- compile tools -->
    <target name="-compile-tools" depends="-init-build">
        <delete dir="${build.tools.classes.dir}"/>
        <mkdir dir="${build.tools.classes.dir}"/>
        <javac srcdir="${src.tools.dir}" destdir="${build.tools.classes.dir}"
               includeantruntime="false" debug="true" encoding="UTF-8"
               source="${javac.source}" target="${javac.target}"
               includes="**" excludes="">
            <classpath refid="tools.classpath"/>
        </javac>
        <copy todir="${build.tools.classes.dir}">
            <fileset dir="${src.tools.dir}">
                <patternset>
                    <include name="META-INF/**/*.*"/>
                    <include name="**/*.properties"/>
                    <include name="**/*.xsl"/>
                    <include name="**/*.xml"/>
                    <include name="**/*.rng"/>
                    <exclude name="**/*.java"/>
                </patternset>
            </fileset>
        </copy>
    </target>

    <!-- build tools jar -->
    <target name="-build-tools" depends="-compile-tools">
        <delete file="${dist.tools.jar}"/>
        <jar destfile="${dist.tools.jar}">
            <fileset dir="${build.tools.classes.dir}"/>
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="Built-On" value="${ISO-TODAY}"/>
                <attribute name="Implementation-Title" value="${project.name}-tools"/>
                <attribute name="Implementation-Version" value="${release.version}"/>
                <attribute name="Implementation-URL" value="http://odt2braille.sourceforge.net"/>
                <attribute name="Class-Path" value="${tools.manifest.classpath}"/>
            </manifest>
        </jar>
    </target>

    <!-- zip tools -->
    <target name="-zip-tools">
        <delete file="${dist.tools.zip}"/>
		<zip destfile="${dist.tools.zip}">
		    <zipfileset file="${dist.tools.jar}" prefix="odt2braille"/>
		    <zipfileset dir="${dist.dir}${file.separator}lib" prefix="odt2braille/lib"/>
			<zipfileset dir="${dist.dir}${file.separator}liblouis" prefix="odt2braille/liblouis"/>
        </zip>
    </target>

    <!-- rebuild extension with some fixes -->
    <target name="-rebuild-extension">

        <!-- unzip extension in a clean dir -->
        <delete dir="${build.oxt.dir}" />
        <mkdir dir="${build.oxt.dir}" />
        <unzip src="${uno.package.name}" dest="${build.oxt.dir}" />

        <!-- add templates folder -->
        <copy todir="${build.oxt.dir}${file.separator}${templates.dir}">
            <fileset dir="${templates.dir}" />
        </copy>

        <!-- add liblouis folder -->
        <copy todir="${build.oxt.dir}${file.separator}liblouis">
            <fileset dir="${dist.dir}${file.separator}liblouis" />
        </copy>

        <!-- add settings folder -->
        <copy todir="${build.oxt.dir}${file.separator}${settings.dir}">
            <fileset dir="${settings.dir}" />
        </copy>

        <!-- add licenses folder -->
        <copy todir="${build.oxt.dir}${file.separator}${licenses.dir}">
            <fileset dir="${licenses.dir}" />
        </copy>

        <!-- specify target in description.xml -->
        <delete file="${build.oxt.dir}${file.separator}description.xml" />
        <filter token="platform-oxt" value="${target.os}"/>
        <copy file="${src.addon.dir}${file.separator}description.xml"
              tofile="${build.oxt.dir}${file.separator}description.xml"
              filtering="true" />

        <!-- zip the new extension addon -->
        <delete file="${uno.package.name}" />

        <zip destfile="${uno.package.name}"
             basedir="${build.oxt.dir}" />		
		
    </target>


<!--
  /- ===========================================================================
  /- DOCUMENTATION
  /- ===========================================================================
  /-->
    
    
    <target name="-build-documentation"
            depends="-init-documentation,-user-documentation,-dev-documentation"/>
                     
    <target name="-init-documentation"
            depends="-properties">
        <delete dir="${build.doc.dir}"/>
    	<mkdir dir="${build.doc.dir}"/>
    </target>
    
    <!-- user documentation -->
    <target name="-user-documentation"
            depends="-user-documentation-html,
                     -user-documentation-pdf"/>
    
	<target name="-user-documentation-html" depends="-init-macrodef-docbook-html">
		<docbook-html docbook="doc/${user.doc}.xml" html="${build.doc.dir}/${user.doc}-${doc.lang}.html"/>
	</target>
    
    <target name="-user-documentation-pdf" depends="-init-macrodef-docbook-pdf">
		<docbook-html docbook="doc/${user.doc}.xml" pdf="${build.doc.dir}/${user.doc}-${doc.lang}.pdf"/>
	</target>
    
    <target name="-user-documentation-odt" depends="-init-macrodef-docbook-odt">
		<docbook-html docbook="doc/${user.doc}.xml" odt="${build.doc.dir}/${user.doc}-${doc.lang}.odt"/>
	</target>
    
    <!-- developer documentation -->
    <target name="-dev-documentation"
            depends="-dev-documentation-html"/>
    
	<target name="-dev-documentation-html" depends="-init-macrodef-docbook-html">
		<docbook-html docbook="doc/${dev.doc}.xml" html="${build.doc.dir}/${dev.doc}.html"/>
	</target>
    
    <target name="-dev-documentation-pdf" depends="-init-macrodef-docbook-pdf">
		<docbook-html docbook="doc/${dev.doc}.xml" pdf="${build.doc.dir}/${dev.doc}.pdf"/>
	</target>
    
    <target name="-dev-documentation-odt" depends="-init-macrodef-docbook-odt">
		<docbook-html docbook="doc/${dev.doc}.xml" odt="${build.doc.dir}/${dev.doc}.odt"/>
	</target>
    
    <!-- macrodefs -->
    <target name="-init-macrodef-docbook-html">
        <fail unless="docbook-xsl.dir">Must set docbook-xsl.dir property</fail>
        <fail unless="saxon.jar"/>
        <macrodef name="docbook-html">
            <attribute name="docbook"/>
            <attribute name="html"/>
            <sequential>
                <java jar="${saxon.jar}" fork="yes">
                    <arg value="-o"/>
                    <arg value="@{html}"/>
                    <arg value="@{docbook}"/>
                    <arg value="${docbook-xsl.dir}/html/profile-docbook.xsl"/>
                    <arg value="profile.lang=${doc.lang}"/>
                    <arg value="section.autolabel=1"/>
                </java>
            </sequential>
        </macrodef>
    </target>
    
    <target name="-init-macrodef-docbook-pdf"
            depends="-init-macrodef-docbook-fo,
                     -init-macrodef-fo-pdf">
        <macrodef name="docbook-pdf">
            <attribute name="docbook"/>
            <attribute name="pdf"/>
            <sequential>
                <docbook-fo docbook="@{docbook}" fo="@{pdf}.fo"/>
                <fo-pdf fo="@{pdf}.fo" pdf="@{pdf}"/>
            </sequential>
        </macrodef>
            
    </target>
    
    <target name="-init-macrodef-docbook-fo">
        <fail unless="docbook-xsl.dir">Must set docbook-xsl.dir property</fail>
        <fail unless="saxon.jar"/>
        <macrodef name="docbook-fo">
            <attribute name="docbook"/>
            <attribute name="fo"/>
            <sequential>
                <java jar="${saxon.jar}" fork="yes">
                    <arg value="-o"/>
                    <arg value="@{fo}"/>
                    <arg value="@{docbook}"/>
                    <arg value="${docbook-xsl.dir}/fo/profile-docbook.xsl"/>
                    <arg value="profile.lang=${doc.lang}"/>
                    <arg value="section.autolabel=1"/>
                </java>
            </sequential>
        </macrodef>
    </target>
    
    <target name="-init-macrodef-fo-pdf"
            depends="-init-taskdef-fop">
        <macrodef name="fo2pdf">
            <attribute name="fo"/>
            <attribute name="pdf"/>
            <sequential>
                <fop fofile="@{fo}" outfile="@{pdf}"/>
            </sequential>
        </macrodef>
    </target>
    
    <target name="-init-taskdef-fop">
        <fail unless="fop.dir">Must set fop.dir property</fail>
        <taskdef name="fop" classname="org.apache.fop.tools.anttasks.Fop">
            <classpath>
                <fileset dir="${fop.dir}/lib">
                    <include name="*.jar"/>
                </fileset>
                <fileset dir="${fop.dir}">
                    <include name="fop.jar"/>
                </fileset>
            </classpath>
        </taskdef>
    </target>
                     
    <target name="-init-macrodef-docbook-odt">
        <fail unless="docbook2odf.dir">Must set docbook2odf.dir property</fail>
        <macrodef name="docbook-odt">
            <attribute name="docbook"/>
            <attribute name="odt"/>
            <sequential>
            	<delete file="${docbook2odf.dir}/utils/temp.xml"/>
                <delete file="${docbook2odf.dir}/utils/temp.odt"/>
                <copy file="@{docbook}" tofile="${docbook2odf.dir}/utils/temp.xml"/>
                <exec dir="${docbook2odf.dir}/utils" executable="./docbook2odf">
                    <arg value="-o"/>
    			    <arg value="temp.odt"/>
                    <arg value="temp.xml"/>
                </exec>
                <move file="${docbook2odf.dir}/utils/temp.odt" tofile="@{odt}"/>
                <delete file="${docbook2odf.dir}/utils/temp.xml"/>
            </sequential>
        </macrodef>
    </target>
    
  
<!--
  /- ===========================================================================
  /- BUILD_UNO_IMPL.XML     TODO: get rid of this                                                  
  /- ===========================================================================
  /-->

    
    <target name="-uno-project-init" depends="-do-init">
    
        <property name="build.uno.version" value="2.0.6"/>
      
        <property name="office.unopkg" value="${office.program.dir}${file.separator}unopkg"/>
        <property name="office.soffice" value="${office.program.dir}${file.separator}soffice"/>
        
        <property name="sdk.idl.dir" location="${oo.sdk.dir}${file.separator}idl"/> 
        <property name="sdk.idlc" value="${sdk.bin.dir}${file.separator}idlc"/>
        <property name="sdk.regmerge" value="${ure.bin.dir}${file.separator}regmerge"/>
        <property name="sdk.javamaker" value="${sdk.bin.dir}${file.separator}javamaker"/>

        <dirname property="project.dir" file="build.xml"/>       
        <property name="uno.package.name" value="${project.dir}${file.separator}${dist.dir}${file.separator}${project.name}.oxt"/>
        <property name="src.addon.dir.absolute" value="${project.dir}${file.separator}${src.addon.dir}"/>

        <property name="idl.out" value="${project.dir}${file.separator}${build.dir}${file.separator}idl"/>
        <property name="idl.classes.dir" value="${project.dir}${file.separator}${build.addon.classes.dir}"/>
        <property name="idl.out.urd" value="${idl.out}/urd"/>
        <property name="idl.out.rdb" value="${idl.out}/rdb"/>
        <property name="idl.rdb.name" value="types.rdb"/>
        <property name="idl.rdb.fullpath" value="${idl.out.rdb}/${idl.rdb.name}"/>
		
        <property name="images.base.dir" value="${build.dir}/img"/>
        <property name="build.registry.dir" value="${build.dir}/cpreg"/>
        
        <mkdir dir="${idl.out}"/>
        <mkdir dir="${idl.out.urd}"/>
        <mkdir dir="${idl.out.rdb}"/>
        <mkdir dir="${images.base.dir}"/>
        <mkdir dir="${build.registry.dir}"/>
		
        <condition property="oo.version.three">
            <equals arg1="${oo.version.number}" arg2="three"/>
        </condition>
    </target>

    <!-- handle images -->
    <target name="-uno-images-condition" description="check images" depends="-uno-project-init">
        <available file="${images.dir}" type="dir" property="images.required"/>
    </target>    
    
    <target name="images" description="copy images" depends="-uno-images-condition" if="images.required">
        <mkdir dir="${images.base.dir}/${images.dir}"/>
        <copy todir="${images.base.dir}/${images.dir}">
            <fileset dir="${images.dir}"/>
        </copy>
    </target>

    <!-- handle xcu/xcs files with package names -->    
    <target name="-uno-registryfiles-condition" description="check xcu and xcs files" depends="-uno-project-init">
        <available file="${registry.dir}" type="dir" property="xcuxcs.required"/>
    </target>    
    
    <target name="registry" description="copy registry files" depends="-uno-registryfiles-condition" if="xcuxcs.required">
        <mkdir dir="${build.registry.dir}/${registry.dir}"/>
        <copy todir="${build.registry.dir}/${registry.dir}">
            <fileset dir="${registry.dir}" includes="**/*.xcu,**/*.xcs"/>
        </copy>
    </target>
    
    <target name="-uno-idl-idlc-condition" description="check idlc dependencies" depends="-uno-project-init">
        <uptodate property="idlc.notRequired" targetfile ="${build.dir}/idlc.compile">
           <srcfiles dir= "${src.addon.dir}" includes="**/*.idl"/>
        </uptodate>
    </target>    
   
    <!-- compile UNO idl files: execution -->
    <target name="-uno-idl-idlc" description="Compile the IDL Conditionally" depends="-uno-idl-idlc-condition" unless="idlc.notRequired">
        <apply executable="${sdk.idlc}" dir="${office.program.dir}" failonerror="true">
            <env key="PATH" path="${office.tool.path}"/>
            <env key="LD_LIBRARY_PATH" path="${office.tool.path}"/> 
            <env key="DYLD_LIBRARY_PATH" path="${office.tool.path}"/>
            <arg value="-C"/>
            <arg value="-O"/>
            <arg value="${idl.out.urd}"/>
            <arg value="-I"/>
            <arg value="${src.addon.dir.absolute}"/>
            <arg value="-I"/> 
            <arg value="${sdk.idl.dir}"/> 
            <fileset dir="${src.addon.dir}" includes="**/*.idl" casesensitive="yes" id="idl.list.id"/>
        </apply>
        <!-- list for copying idl files in own jar -->
        <property name="idl.file" refid="idl.list.id"/>
        <propertyfile file="${idl.out}/idl_list.properties">
            <entry key="idl.file.list" value="${idl.file}"/>
        </propertyfile>
        <replace file="${idl.out}/idl_list.properties" token=".idl" value=".class"/>
        <replace file="${idl.out}/idl_list.properties" token=";" value=","/>
    </target>

    <!-- merge urd files: execution -->
    <target name="-uno-idl-regmerge" description="Merge urd Files Conditionally" depends="-uno-idl-idlc,-uno-idl-idlc-condition" unless="idlc.notRequired">
        <!-- to only extract the new files, delete the old rdb -->
        <delete file="${idl.rdb.fullpath}"/>        
        <apply executable="${sdk.regmerge}" dir="${office.program.dir}" failonerror="true">
            <env key="PATH" path="${office.tool.path}"/>
            <env key="LD_LIBRARY_PATH" path="${office.tool.path}"/>
            <env key="DYLD_LIBRARY_PATH" path="${office.tool.path}"/> 
            <arg file="${idl.rdb.fullpath}"/>
            <arg value="/UCR"/>
            <fileset dir="${idl.out.urd}" includes="**/*.urd" casesensitive="yes"/>
        </apply>
    </target>

    <!-- should javamaker be executed -->
    <target name="-uno-idl-javamaker-condition" description="check if rdb was created" depends="-uno-idl-regmerge,-uno-idl-idlc-condition">
        <available file="${idl.rdb.name}" filepath="${idl.out.rdb}" property="javamaker.Required"/>
    </target>
    
    <!-- generate Java class files from type library: execution -->
    <target name="-uno-idl-javamaker" depends="-uno-idl-regmerge,-uno-idl-idlc-condition,-uno-idl-javamaker-condition" if="javamaker.Required" unless="idlc.notRequired">
        <echo message="generating java class files from rdb..."/>
        <exec executable="${sdk.javamaker}" dir="${office.program.dir}" failonerror="true">
            <env key="PATH" path="${office.tool.path}"/>                
            <env key="LD_LIBRARY_PATH" path="${office.tool.path}"/>
            <env key="DYLD_LIBRARY_PATH" path="${office.tool.path}"/> 
            <arg value="-BUCR"/>
            <arg value="-O"/>
            <arg value="${idl.classes.dir}"/>
            <arg file="${idl.rdb.fullpath}"/>
            <arg value="${oo.unotypes.rdb}"/>
            <arg value="${oo.offapi.rdb}"/>
        </exec>
    </target>

    <target name="-uno-idl-result" depends="-uno-idl-javamaker">
        <touch file="${build.dir}/idlc.compile"/>
        <echo message="build UNO idl files finished"/>
    </target>
 
    <!-- the main target, called in recursive builds -->
    <target name="uno-idl-compile" description="Compiles UNO idl files" depends="-uno-idl-result"/>

    <target name="-jar-idl-types" depends="-do-uno-types" unless="no.idl.files">
        <mkdir dir="${dist.dir}"/>
        <jar basedir="${build.addon.classes.dir}" compress="true" jarfile="${dist.dir}/${idl_types.jar}" includes="${idl.file.list}">
            <manifest>
                <attribute name="UNO-Type-Path" value="&lt;&gt;"/>
            </manifest>
        </jar>
    </target>

	<target name="-do-addon-jar">
        <jar basedir="${build.addon.classes.dir}"
             compress="true"
             filesonly="true"
             manifest="${build.dir}/MANIFEST.MF"
             jarfile="${dist.addon.jar}"
             excludes="**/*.xml,**/*.txt,${idl.file.list},${build.classes.excludes}"/>
    </target>
	
    <target name="-do-openoffice-manifest" depends="-do-registration,-do-class-path"/>
    
    <!-- enter the class path with external jars -->
    <target name="-do-class-path">
        <manifest file="${build.dir}/MANIFEST.MF" mode="update">
            <attribute name="Class-Path" value="${addon.manifest.classpath}"/>
        </manifest>
    </target>
    
    <!-- enter idl type definitions -->
    <target name="-do-uno-types" depends="-do-empty-unopath,-do-idl-unopath"/>
    <target name="-do-idl-unopath" depends="-check-uno-types" if="own.idl.files">
        <manifest file="${build.dir}/MANIFEST.MF" mode="update">
            <attribute name="UNO-Type-Path" value="${idl_types.jar}"/> 
        </manifest>            
    </target>
    <target name="-do-empty-unopath" depends="-check-uno-types" if="no.idl.files">
        <manifest file="${build.dir}/MANIFEST.MF" mode="update">
            <attribute name="UNO-Type-Path" value=""/> 
        </manifest>            
    </target>
    <target name="-check-uno-types">
        <property file="${idl.out}/idl_list.properties"/>
        <condition property="no.idl.files">
            <equals arg1="${idl.file.list}" arg2="" trim="true"/>
        </condition>
        <condition property="own.idl.files">
            <not>
                <istrue value="${no.idl.files}"/>
            </not>
        </condition>
    </target>
    
    <!-- enter the registration classes. Do nothing when the project is old -->
    <target name="-do-registration" depends="-do-central-registration" 
                if="new.project.registration">
        <manifest file="${build.dir}/MANIFEST.MF" mode="update">
            <section name="${slash.registration.class}"> 
                <attribute name="RegistrationClasses" value="${registration.classname}"/>
            </section>
        </manifest>
    </target>
    
    <!-- enter the registration class name. Do nothing when the project is old -->
    <target name="-do-central-registration" depends="-do-old-project-registration" if="new.project.registration">
        <property name="regclass.properties" value="${build.dir}/regclass.properties"/>
        <propertyfile file="${regclass.properties}">
            <entry key="dot.registration" value="${slash.registration.class}"/>
        </propertyfile>
        <replace file="${regclass.properties}" token=".class" value=""/>
        <replace file="${regclass.properties}" token="/" value="."/>
        <property file="${regclass.properties}"/>
        <manifest file="${build.dir}/MANIFEST.MF" mode="update">
            <attribute name="RegistrationClassName" value="${dot.registration}"/>
        </manifest>
    </target>
    
    <!-- Do the registration for older projects without a central registration class -->
    <target name="-do-old-project-registration" depends="-check-for-old-project" if="old.project.registration">
        <manifest file="${build.dir}/MANIFEST.MF" mode="update">
            <attribute name="RegistrationClassName" value="${registration.classname}"/>
        </manifest>
    </target>
    <target name="-check-for-old-project">
        <!-- central registration class in project -->
        <fileset id="registration.class.name" dir="${build.addon.classes.dir}">
            <patternset>
                <include name="**/CentralRegistrationClass.class"/>
            </patternset>
        </fileset>
        <property name="systemslash.registration.class" refid="registration.class.name"/>
        <!-- make forward slash from backslash on Windows -->
        <property name="regclass.properties" value="${build.dir}/regclass.properties"/>
        <propertyfile file="${regclass.properties}">
            <entry key="slash.registration.class" value="${systemslash.registration.class}"/>
        </propertyfile>
        <replace file="${regclass.properties}" token="\\" value="/"/>
        <property file="${regclass.properties}"/>
        <!-- now slash is ok -->
        <condition property="old.project.registration">
            <equals trim="true" arg1="${slash.registration.class}" arg2=""/>
        </condition>
        <condition property="new.project.registration">
            <isfalse value="${old.project.registration}"/>
        </condition>
    </target>
    
    <target name="-delete-uno-package">
        <delete failonerror="false" file="${uno.package.name}"/>
    </target>

    <target name="-license-exists">
        <available file="${project.dir}/${licenses.dir}" type="dir" property="do.license"/>
    </target>
    
    <!-- test for licenses dir is necessary because zipfileset fails if dir not there -->
    <target name="-uno-package-with-license" depends="-license-exists" if="do.license">
        <zip update="true" destfile="${uno.package.name}">
            <zipfileset dir="${project.dir}/${licenses.dir}" includes="**" casesensitive="yes" prefix="${licenses.dir}"/>
        </zip>
    </target>

    <target name="-description-exists">
        <available file="${project.dir}/${description.dir}" type="dir" property="do.description"/>
    </target>
    
    <!-- test for description dir is necessary because zipfileset fails if dir not there -->
    <target name="-uno-package-with-description" depends="-description-exists" if="do.description">
        <zip update="true" destfile="${uno.package.name}">
            <zipfileset dir="${project.dir}/${description.dir}" includes="**" casesensitive="yes" prefix="${description.dir}"/>
        </zip>
    </target>

    <target name="-help-exists">
        <available file="${project.dir}/${help.dir}" type="dir" property="do.help"/>
    </target>
    
    <!-- test for help dir is necessary because zipfileset fails if dir not there -->
    <target name="-uno-package-with-help" depends="-help-exists" if="do.help">
        <zip update="true" destfile="${uno.package.name}">
            <zipfileset dir="${help.dir}" includes="${help.content.extensions}" prefix="${help.dir}"/>
        </zip>
    </target>    
 
    <target name="-dialogs-exists">
        <available file="${project.dir}/${dialogs.dir}" type="dir" property="do.dialogs"/>
    </target>
    
    <!-- test for dialogs dir is necessary because zipfileset fails if dir not there -->
    <target name="-uno-package-with-dialogs" depends="-dialogs-exists" if="do.dialogs">
        <zip update="true" destfile="${uno.package.name}">
            <zipfileset dir="${dialogs.dir}" includes="${dialog.content.extensions}" prefix="dialogs"/>
        </zip>
    </target>   
    
    <target name="-do-uno-package"
	        description="Creates UNO extension pacakge"
			depends="-uno-package-with-license,-uno-package-with-help,-uno-package-with-dialogs,-uno-package-with-description">
        <zip update="true" destfile="${uno.package.name}">
            <fileset dir="${src.addon.dir}" includes="${manifest.package.extensions}" casesensitive="yes"/>
            <fileset dir="${build.registry.dir}" casesensitive="yes"/>
            <fileset dir="${src.addon.dir}" includes="description.xml" casesensitive="yes"/>
            <fileset dir="${dist.dir}" includes="**/*.jar" casesensitive="yes"/>
            <fileset dir="${images.base.dir}" includes="**" casesensitive="yes"/>
            <fileset dir="${idl.out.rdb}" includes="**/*.rdb" casesensitive="yes"/>
            <zipfileset dir="${src.addon.dir}" includes="uno-extension-manifest.xml" fullpath="META-INF/manifest.xml"/>
        </zip>
    </target>

    <!-- subtargets for different office versions -->
    <target name="-run-oo">
        <echo message="${office.unopkg} gui -f ${uno.package.name}"/>
        <exec dir="${office.program.dir}" executable="${office.unopkg}" failonerror="true">
            <arg value="gui"/>
            <arg value="-f"/>
            <arg file="${uno.package.name}"/>
        </exec>
        <echo message="${office.soffice}"/>
        <exec executable="${office.soffice}" dir="${office.program.dir}" failonerror="true">
            <arg value="${office.startup.options}"/>
        </exec>
    </target>
    
    
<!--
  /- ===========================================================================
  /- BUILD_IMPL.XML     TODO: get rid of this                                                        
  /- ===========================================================================
  /-->

    
    <target depends="-pre-init" name="-do-init">
       
        <property name="run.jvmargs" value=""/>
        <property name="javac.compilerargs" value=""/>
        <property name="work.dir" value="${basedir}"/>
        <condition property="no.deps">
            <and>
                <istrue value="${no.dependencies}"/>
            </and>
        </condition>
        <property name="javac.debug" value="true"/>
        <property name="application.args" value=""/>
        <property name="source.encoding" value="${file.encoding}"/>
        <property name="runtime.encoding" value="${source.encoding}"/>
        <condition property="javadoc.encoding.used" value="${javadoc.encoding}">
            <and>
                <isset property="javadoc.encoding"/>
                <not>
                    <equals arg1="${javadoc.encoding}" arg2=""/>
                </not>
            </and>
        </condition>
        <property name="javadoc.encoding.used" value="${source.encoding}"/>
        <property name="includes" value="**"/>
        <property name="excludes" value=""/>
        <property name="do.depend" value="false"/>
        <condition property="do.depend.true">
            <istrue value="${do.depend}"/>
        </condition>
        <path id="endorsed.classpath.path" path="${endorsed.classpath}"/>
        <condition else="" property="endorsed.classpath.cmd.line.arg" value="-Xbootclasspath/p:'${toString:endorsed.classpath.path}'">
            <length length="0" string="${endorsed.classpath}" when="greater"/>
        </condition>
        <condition else="false" property="jdkBug6558476">
            <and>
                <matches pattern="1\.[56]" string="${java.specification.version}"/>
                <not>
                    <os family="unix"/>
                </not>
            </and>
        </condition>
        <property name="javac.fork" value="${jdkBug6558476}"/>
        <property name="jar.index" value="false"/>
        <property name="jar.index.metainf" value="${jar.index}"/>
        <available file="${meta.inf.dir}/persistence.xml" property="has.persistence.xml"/>
    </target>
    
    <target depends="-pre-init,-do-init" name="-init-check">
        <fail unless="src.addon.dir">Must set src.addon.dir</fail>
        <fail unless="test.src.dir">Must set test.src.dir</fail>
        <fail unless="build.dir">Must set build.dir</fail>
        <fail unless="dist.dir">Must set dist.dir</fail>
        <fail unless="build.addon.classes.dir">Must set build.addon.classes.dir</fail>
        <fail unless="dist.javadoc.dir">Must set dist.javadoc.dir</fail>
        <fail unless="build.test.classes.dir">Must set build.test.classes.dir</fail>
        <fail unless="build.test.results.dir">Must set build.test.results.dir</fail>
        <fail unless="build.classes.excludes">Must set build.classes.excludes</fail>
        <fail unless="dist.addon.jar">Must set dist.addon.jar</fail>
    </target>
    
    <target name="-init-macrodef-javac">
        
        <macrodef name="javac" uri="http://www.netbeans.org/ns/j2se-project/3">
            <attribute default="${src.addon.dir}" name="srcdir"/>
            <attribute default="${build.addon.classes.dir}" name="destdir"/>
            <attribute default="${javac.addon.classpath}" name="classpath"/>
            <attribute default="${includes}" name="includes"/>
            <attribute default="${excludes}" name="excludes"/>
            <attribute default="${javac.debug}" name="debug"/>
            <attribute default="${empty.dir}" name="sourcepath"/>
            <attribute default="${empty.dir}" name="gensrcdir"/>
            <element name="customize" optional="true"/>
            <sequential>
                <property location="${build.dir}/empty" name="empty.dir"/>
                <mkdir dir="${empty.dir}"/>
                <javac debug="@{debug}" deprecation="${javac.deprecation}" destdir="@{destdir}" encoding="${source.encoding}" excludes="@{excludes}" fork="${javac.fork}" includeantruntime="false" includes="@{includes}" source="${javac.source}" sourcepath="@{sourcepath}" srcdir="@{srcdir}" target="${javac.target}" tempdir="${java.io.tmpdir}">
                    <src>
                        <dirset dir="@{gensrcdir}" erroronmissingdir="false">
                            <include name="*"/>
                        </dirset>
                    </src>
                    <classpath>
                        <path path="@{classpath}"/>
                    </classpath>
                    <compilerarg line="${endorsed.classpath.cmd.line.arg}"/>
                    <compilerarg line="${javac.compilerargs}"/>
                    <customize/>
                </javac>
            </sequential>
        </macrodef>
        
        <macrodef name="depend" uri="http://www.netbeans.org/ns/j2se-project/3">
            <attribute default="${src.addon.dir}" name="srcdir"/>
            <attribute default="${build.addon.classes.dir}" name="destdir"/>
            <attribute default="${javac.addon.classpath}" name="classpath"/>
            <sequential>
                <depend cache="${build.dir}/depcache" destdir="@{destdir}" excludes="${excludes}" includes="${includes}" srcdir="@{srcdir}">
                    <classpath>
                        <path path="@{classpath}"/>
                    </classpath>
                </depend>
            </sequential>
        </macrodef>
    </target>
    
    <target name="-init-macrodef-junit">
        <macrodef name="junit" uri="http://www.netbeans.org/ns/j2se-project/3">
            <attribute default="${includes}" name="includes"/>
            <attribute default="${excludes}" name="excludes"/>
            <attribute default="**" name="testincludes"/>
            <sequential>
                <property name="junit.forkmode" value="perTest"/>
                <junit dir="${work.dir}" errorproperty="tests.failed" failureproperty="tests.failed" fork="true" forkmode="${junit.forkmode}" showoutput="true" tempdir="${build.dir}">
                    <batchtest todir="${build.test.results.dir}">
                        <fileset dir="${test.src.dir}" excludes="@{excludes},${excludes}" includes="@{includes}">
                            <filename name="@{testincludes}"/>
                        </fileset>
                    </batchtest>
                    <classpath>
                        <path path="${run.test.classpath}"/>
                    </classpath>
                    <syspropertyset>
                        <propertyref prefix="test-sys-prop."/>
                        <mapper from="test-sys-prop.*" to="*" type="glob"/>
                    </syspropertyset>
                    <formatter type="brief" usefile="false"/>
                    <formatter type="xml"/>
                    <jvmarg line="${endorsed.classpath.cmd.line.arg}"/>
                    <jvmarg value="-ea"/>
                    <jvmarg line="${run.jvmargs}"/>
                </junit>
            </sequential>
        </macrodef>
    </target>
   
    <target name="init" depends="-pre-init,-do-init,-post-init,-init-check,-init-macrodef-javac,-init-macrodef-junit"/>

    <!--
                ===================
                COMPILATION SECTION
                ===================
            -->

    <target name="-deps-jar-init" unless="built-jar.properties">
        <property location="${build.dir}/built-jar.properties" name="built-jar.properties"/>
        <delete file="${built-jar.properties}" quiet="true"/>
    </target>
    <target if="already.built.jar.${basedir}" name="-warn-already-built-jar">
        <echo level="warn" message="Cycle detected: Odt2BrailleAddOn was already built"/>
    </target>
    <target depends="init,-deps-jar-init" name="deps-jar" unless="no.deps">
        <mkdir dir="${build.dir}"/>
        <touch file="${built-jar.properties}" verbose="false"/>
        <property file="${built-jar.properties}" prefix="already.built.jar."/>
        <antcall target="-warn-already-built-jar"/>
        <propertyfile file="${built-jar.properties}">
            <entry key="${basedir}" value=""/>
        </propertyfile>
    </target>
    <target depends="init,-check-automatic-build,-clean-after-automatic-build" name="-verify-automatic-build"/>
    <target depends="init" name="-check-automatic-build">
        <available file="${build.addon.classes.dir}/.netbeans_automatic_build" property="netbeans.automatic.build"/>
    </target>
    <target depends="init" if="netbeans.automatic.build" name="-clean-after-automatic-build">
        <antcall target="clean"/>
    </target>
    <target depends="init,deps-jar" name="-pre-pre-compile">
        <mkdir dir="${build.addon.classes.dir}"/>
    </target>

    <target if="do.depend.true" name="-compile-depend">
        <pathconvert property="build.generated.subdirs">
            <dirset dir="${build.generated.sources.dir}" erroronmissingdir="false">
                <include name="*"/>
            </dirset>
        </pathconvert>
        <j2seproject3:depend srcdir="${src.addon.dir}:${build.generated.subdirs}"/>
    </target>
    <target depends="init,deps-jar,-pre-pre-compile,-pre-compile, -copy-persistence-xml,-compile-depend" name="-do-compile">
        <j2seproject3:javac gensrcdir="${build.generated.sources.dir}"/>
        <copy todir="${build.addon.classes.dir}">
            <fileset dir="${src.addon.dir}" excludes="${build.classes.excludes},${excludes}" includes="${includes}"/>
        </copy>
    </target>
    <target if="has.persistence.xml" name="-copy-persistence-xml">
        <mkdir dir="${build.addon.classes.dir}/META-INF"/>
        <copy todir="${build.addon.classes.dir}/META-INF">
            <fileset dir="${meta.inf.dir}" includes="persistence.xml"/>
        </copy>
    </target>

    <!--
                ===============
                JAVADOC SECTION
                ===============
            -->

    <target depends="init" name="-javadoc-build">
        <mkdir dir="${dist.javadoc.dir}"/>
        <javadoc additionalparam="${javadoc.additionalparam}" author="${javadoc.author}" charset="UTF-8" destdir="${dist.javadoc.dir}" docencoding="UTF-8" encoding="${javadoc.encoding.used}" failonerror="true" noindex="${javadoc.noindex}" nonavbar="${javadoc.nonavbar}" notree="${javadoc.notree}" private="${javadoc.private}" source="${javac.source}" splitindex="${javadoc.splitindex}" use="${javadoc.use}" useexternalfile="true" version="${javadoc.version}" windowtitle="${javadoc.windowtitle}">
            <classpath>
                <path path="${javac.addon.classpath}"/>
            </classpath>
            <fileset dir="${src.addon.dir}" excludes="${excludes}" includes="${includes}">
                <filename name="**/*.java"/>
            </fileset>
            <fileset dir="${src.core.dir}" excludes="${excludes}" includes="${includes}">
                <filename name="**/*.java"/>
            </fileset>
            <fileset dir="${src.tools.dir}" excludes="${excludes}" includes="${includes}">
                <filename name="**/*.java"/>
            </fileset>
            <fileset dir="${build.generated.sources.dir}" erroronmissingdir="false">
                <include name="**/*.java"/>
            </fileset>
        </javadoc>
        <copy todir="${dist.javadoc.dir}">
            <fileset dir="${src.addon.dir}" excludes="${excludes}" includes="${includes}">
                <filename name="**/doc-files/**"/>
            </fileset>
            <fileset dir="${src.core.dir}" excludes="${excludes}" includes="${includes}">
                <filename name="**/doc-files/**"/>
            </fileset>
            <fileset dir="${src.tools.dir}" excludes="${excludes}" includes="${includes}">
                <filename name="**/*.java"/>
            </fileset>
            <fileset dir="${build.generated.sources.dir}" erroronmissingdir="false">
                <include name="**/doc-files/**"/>
            </fileset>
        </copy>
    </target>
    
    <!--
                =========================
                JUNIT COMPILATION SECTION
                =========================
            -->

    <target depends="init,-compile-core" name="-pre-pre-compile-test">
        <mkdir dir="${build.test.classes.dir}"/>
    </target>

    <target if="do.depend.true" name="-compile-test-depend">
        <j2seproject3:depend classpath="${javac.test.classpath}" destdir="${build.test.classes.dir}" srcdir="${test.src.dir}"/>
    </target>
    <target depends="init,-compile-core,-pre-pre-compile-test,-pre-compile-test,-compile-test-depend" name="-do-compile-test">
        <j2seproject3:javac classpath="${javac.test.classpath}" debug="true" destdir="${build.test.classes.dir}" srcdir="${test.src.dir}"/>
        <copy todir="${build.test.classes.dir}">
            <fileset dir="${test.src.dir}" excludes="${build.classes.excludes},${excludes}" includes="${includes}"/>
        </copy>
    </target>

    <target depends="init,-compile-core,-pre-pre-compile-test,-pre-compile-test,-do-compile-test,-post-compile-test" name="compile-test"/>

    <!--
                =======================
                JUNIT EXECUTION SECTION
                =======================
            -->

    <target depends="init" name="-pre-test-run">
        <mkdir dir="${build.test.results.dir}"/>
    </target>
    <target depends="init,compile-test,-pre-test-run" name="-do-test-run">
        <j2seproject3:junit testincludes="**/*Test.java"/>
    </target>
    <target depends="init,compile-test,-pre-test-run,-do-test-run" name="-post-test-run">
        <fail if="tests.failed" unless="ignore.failing.tests">Some tests failed; see details above.</fail>
    </target>
    
    <!-- make html report from test results -->
    <target depends="init" name="-test-report">
        <delete dir="${build.test.report.dir}"/>
        <mkdir dir="${build.test.report.dir}"/>
        <junitreport todir="${build.test.report.dir}">
            <fileset dir="${build.test.results.dir}">
                <include name="TEST-*.xml" />
            </fileset>
            <report todir="${build.test.report.dir}" />
        </junitreport>	
    </target>

    <!--
                ===============
                CLEANUP SECTION
                ===============
            -->
            
    <target name="-deps-clean-init" unless="built-clean.properties">
        <property location="${build.dir}/built-clean.properties" name="built-clean.properties"/>
        <delete file="${built-clean.properties}" quiet="true"/>
    </target>
    <target if="already.built.clean.${basedir}" name="-warn-already-built-clean">
        <echo level="warn" message="Cycle detected: Odt2BrailleAddOn was already built"/>
    </target>
    <target depends="init,-deps-clean-init" name="deps-clean" unless="no.deps">
        <mkdir dir="${build.dir}"/>
        <touch file="${built-clean.properties}" verbose="false"/>
        <property file="${built-clean.properties}" prefix="already.built.clean."/>
        <antcall target="-warn-already-built-clean"/>
        <propertyfile file="${built-clean.properties}">
            <entry key="${basedir}" value=""/>
        </propertyfile>
    </target>
    <target depends="init" name="-do-clean">
        <delete dir="${build.dir}"/>
        <delete dir="${dist.dir}" followsymlinks="false" includeemptydirs="true"/>
    </target>

    <target name="-check-call-dep">
        <property file="${call.built.properties}" prefix="already.built."/>
        <condition property="should.call.dep">
            <not>
                <isset property="already.built.${call.subproject}"/>
            </not>
        </condition>
    </target>
    <target depends="-check-call-dep" if="should.call.dep" name="-maybe-call-dep">
        <ant antfile="${call.script}" inheritall="false" target="${call.target}">
            <propertyset>
                <propertyref prefix="transfer."/>
                <mapper from="transfer.*" to="*" type="glob"/>
            </propertyset>
        </ant>
    </target>
	
</project>
