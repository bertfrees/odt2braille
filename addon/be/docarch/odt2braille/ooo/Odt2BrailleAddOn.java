/**
 *  odt2braille - Braille authoring in OpenOffice.org.
 *
 *  Copyright (c) 2010-2011 by DocArch <http://www.docarch.be>.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package be.docarch.odt2braille.ooo;

import be.docarch.odt2braille.Constants;

import com.sun.star.uno.UnoRuntime;
import com.sun.star.uno.XComponentContext;
import com.sun.star.lib.uno.helper.Factory;
import com.sun.star.lang.XSingleComponentFactory;
import com.sun.star.registry.XRegistryKey;
import com.sun.star.lib.uno.helper.WeakBase;

/**
 * This class was generated by the NetBeans OOo API plugin.
 * <code>queryDispatch</code> and <code>dispatch</code> were changed.
 * In <code>dispatch</code>, calls are made to <code>UnoGUI.changeSettings</code>, <code>UnoGUI.exportBraille</code> or <code>UnoGUI.embossBraille</code>,
 * depending on which menu item was selected.
 *
 * @author  Bert Frees
 */
public final class Odt2BrailleAddOn extends WeakBase
   implements com.sun.star.lang.XServiceInfo,
              com.sun.star.frame.XDispatchProvider,
              com.sun.star.lang.XInitialization,
              com.sun.star.frame.XDispatch
{
    private static final boolean IS_MAC_OS = System.getProperty("os.name").toLowerCase().contains("mac os");

    private final XComponentContext m_xContext;
    private com.sun.star.frame.XFrame m_xFrame;
    private static final String m_implementationName = Odt2BrailleAddOn.class.getName();
    private static final String[] m_serviceNames = {
        "com.sun.star.frame.ProtocolHandler" };

    public Odt2BrailleAddOn( XComponentContext context )
    {
        m_xContext = context;
    };

    public static XSingleComponentFactory __getComponentFactory( String sImplementationName ) {
        XSingleComponentFactory xFactory = null;

        if ( sImplementationName.equals( m_implementationName ) )
            xFactory = Factory.createComponentFactory(Odt2BrailleAddOn.class, m_serviceNames);
        return xFactory;
    }

    public static boolean __writeRegistryServiceInfo( XRegistryKey xRegistryKey ) {
        return Factory.writeRegistryServiceInfo(m_implementationName,
                                                m_serviceNames,
                                                xRegistryKey);
    }

    @Override
    public String getImplementationName() {
         return m_implementationName;
    }

    @Override
    public boolean supportsService( String sService ) {
        int len = m_serviceNames.length;

        for( int i=0; i < len; i++) {
            if (sService.equals(m_serviceNames[i]))
                return true;
        }
        return false;
    }

    @Override
    public String[] getSupportedServiceNames() {
        return m_serviceNames;
    }

    @Override
    public com.sun.star.frame.XDispatch queryDispatch(com.sun.star.util.URL aURL,
                                                      String sTargetFrameName,
                                                      int iSearchFlags) {

        if (aURL.Protocol.startsWith("be.docarch.odt2braille.ooo.odt2brailleaddon")) {
            if (aURL.Path.compareTo("FormatCommand") == 0 ||
                aURL.Path.compareTo("ExportCommand") == 0 ||
               (aURL.Path.compareTo("EmbossCommand") == 0  && !IS_MAC_OS) ||
                aURL.Path.compareTo("InsertDotPatternCommand") == 0 ||
                aURL.Path.compareTo("InsertSixKeysCommand") == 0) {
                return this;
            }
        }
        return null;
    }

    @Override
    public com.sun.star.frame.XDispatch[] queryDispatches(
         com.sun.star.frame.DispatchDescriptor[] seqDescriptors )
    {
        int nCount = seqDescriptors.length;
        com.sun.star.frame.XDispatch[] seqDispatcher =
            new com.sun.star.frame.XDispatch[seqDescriptors.length];

        for( int i=0; i < nCount; ++i )
        {
            seqDispatcher[i] = queryDispatch(seqDescriptors[i].FeatureURL,
                                             seqDescriptors[i].FrameName,
                                             seqDescriptors[i].SearchFlags );
        }
        return seqDispatcher;
    }

    @Override
    public void initialize( Object[] object )
        throws com.sun.star.uno.Exception
    {
        if ( object.length > 0 )
        {
            m_xFrame = (com.sun.star.frame.XFrame)UnoRuntime.queryInterface(
                com.sun.star.frame.XFrame.class, object[0]);
        }
    }

    @Override
    public void dispatch(com.sun.star.util.URL aURL,
                         com.sun.star.beans.PropertyValue[] aArguments) {

        UnoGUI unoGui = null;

        try {

            if (aURL.Protocol.startsWith("be.docarch.odt2braille.ooo.odt2brailleaddon")) {

                unoGui = new UnoGUI(m_xContext, m_xFrame);

                     if (aURL.Path.compareTo("FormatCommand") == 0)               { unoGui.changeSettings(); }
                else if (aURL.Path.compareTo("ExportCommand") == 0 )              { unoGui.exportBraille(); }
                else if (aURL.Path.compareTo("EmbossCommand") == 0 && !IS_MAC_OS) { unoGui.embossBraille(); }
                else if (aURL.Path.compareTo("EmbossCommand") == 0)               { unoGui.embossBrailleAlternative(); }
                else if (aURL.Path.compareTo("InsertDotPatternCommand") == 0 )    { unoGui.insertBraille(); }
                else if (aURL.Path.compareTo("InsertSixKeysCommand") == 0 )       { unoGui.sixKeyEntryMode(); }
            }
        } finally {
            Constants.flushLogger();
        }
    }

    @Override
    public void addStatusListener( com.sun.star.frame.XStatusListener xControl,
                                    com.sun.star.util.URL aURL )
    {}

    @Override
    public void removeStatusListener( com.sun.star.frame.XStatusListener xControl,
                                       com.sun.star.util.URL aURL )
    {}

}
