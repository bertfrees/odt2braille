/**
 *  odt2braille - Braille authoring in OpenOffice.org.
 *
 *  Copyright (c) 2010 by DocArch <http://www.docarch.be>.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package be.docarch.odt2braille;

import java.io.File;
import java.util.ArrayList;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.logging.Logger;

import java.net.MalformedURLException;
import java.io.IOException;

import be.docarch.odt2braille.Volume.VolumeType;

/**
 * With this class a document can be checked for possible accessibility issues.
 *
 * You can
 * <ul>
 * <li>check the braille {@link Settings},</li>
 * <li>check the flat .odt file generated by OpenOffice.org,</li>
 * <li>check the intermediate daisy-like files generated by {@link Odt2Daisy}, and</li>
 * <li>check the volume lengths of the resulting braille document.</li>
 * </ul>
 *
 * The <code>Checker</code> entity collects all of this information and uses it to generating warnings.
 *
 * @author Bert Frees
 */
public class Checker {

    private final static Logger logger = Logger.getLogger("be.docarch.odt2braille");
    private Settings settings = null;
    private OdtTransformer odtTransformer = null;
    private static NamespaceContext namespace = new NamespaceContext();

    private final static int MAX_VOLUME_LENGTH = 100;
    private final static int MIN_VOLUME_LENGTH = 70;
    private final static int MAX_VOLUME_DIFFERENCE = 20;
    
    private boolean noPreliminaryPages = false;
    private boolean noTitlePage = false;
    private boolean noHeadings = false;
    private boolean tablesWithoutHeading = false;
    private boolean tablesWithMergedCells = false;
    private boolean imagesWithoutTitleOrAltDescription = false;
    private boolean volumesTooLong = false;
    private boolean volumesTooShort = false;
    private boolean volumesDifferTooMuch = false;
    private boolean preliminaryVolumeRequired = false;
    private boolean preliminaryVolumeTooShort = false;
    private boolean volumeDoesntBeginWithHeading = false;
    private boolean omissionsInsideVolume = false;
    private boolean omissionsOutsideVolume = false;
    private boolean transpositions = false;
    private boolean tocNotReplaced = false;
    private boolean pageWidthTooSmall = false;
    private boolean eightDotsNotSupported = false;

    private String L10N_warning = null;
    private String L10N_question = null;
    private String L10N_details = null;

    private String L10N_noPreliminaryPages = null;
    private String L10N_noTitlePage = null;
    private String L10N_noHeadings = null;
    private String L10N_tablesWithoutHeading = null;
    private String L10N_tablesWithMergedCells = null;
    private String L10N_imagesWithoutTitleOrAltDescription = null;
    private String L10N_volumesTooLong = null;
    private String L10N_volumesTooShort = null;
    private String L10N_volumesDifferTooMuch = null;
    private String L10N_preliminaryVolumeRequired = null;
    private String L10N_preliminaryVolumeTooShort = null;
    private String L10N_volumeDoesntBeginWithHeading = null;
    private String L10N_omissionsInsideVolume = null;
    private String L10N_omissionsOutsideVolume = null;
    private String L10N_transpositions = null;
    private String L10N_tocNotReplaced = null;
    private String L10N_pageWidthTooSmall = null;
    private String L10N_eightDotsNotSupported = null;

    /**
     * Creates a new <code>Checker</code> instance.
     *
     * @param oooLocale         The <code>Locale</code> for the user interface.
     * @param settings          The braille settings.
     */
    public Checker(Locale oooLocale,
                   Settings settings,
                   OdtTransformer odtTransformer) {

        logger.entering("Checker", "<init>");

        this.settings = settings;
        this.odtTransformer = odtTransformer;

        L10N_warning = ResourceBundle.getBundle("be/docarch/odt2braille/l10n/Bundle", oooLocale).getString("checkerWarning");
        L10N_question = ResourceBundle.getBundle("be/docarch/odt2braille/l10n/Bundle", oooLocale).getString("checkerQuestion");
        L10N_details = ResourceBundle.getBundle("be/docarch/odt2braille/l10n/Bundle", oooLocale).getString("checkerDetails");

        L10N_noPreliminaryPages = ResourceBundle.getBundle("be/docarch/odt2braille/l10n/Bundle", oooLocale).getString("noPreliminaryPagesWarning");
        L10N_noTitlePage = ResourceBundle.getBundle("be/docarch/odt2braille/l10n/Bundle", oooLocale).getString("noTitlePageWarning");
        L10N_noHeadings = ResourceBundle.getBundle("be/docarch/odt2braille/l10n/Bundle", oooLocale).getString("noHeadingsWarning");
        L10N_tablesWithoutHeading = ResourceBundle.getBundle("be/docarch/odt2braille/l10n/Bundle", oooLocale).getString("tablesWithoutHeadingWarning");
        L10N_tablesWithMergedCells = ResourceBundle.getBundle("be/docarch/odt2braille/l10n/Bundle", oooLocale).getString("tablesWithColOrRowSpanWarning");
        L10N_imagesWithoutTitleOrAltDescription = ResourceBundle.getBundle("be/docarch/odt2braille/l10n/Bundle", oooLocale).getString("imagesWithoutTitleOrAltDescriptionWarning");
        L10N_volumesTooLong = ResourceBundle.getBundle("be/docarch/odt2braille/l10n/Bundle", oooLocale).getString("volumesTooLongWarning");
        L10N_volumesTooShort = ResourceBundle.getBundle("be/docarch/odt2braille/l10n/Bundle", oooLocale).getString("volumesTooShortWarning");
        L10N_volumesDifferTooMuch = ResourceBundle.getBundle("be/docarch/odt2braille/l10n/Bundle", oooLocale).getString("volumesDifferTooMuchWarning");
        L10N_preliminaryVolumeRequired = ResourceBundle.getBundle("be/docarch/odt2braille/l10n/Bundle", oooLocale).getString("preliminaryVolumeRequiredWarning");
        L10N_preliminaryVolumeTooShort = ResourceBundle.getBundle("be/docarch/odt2braille/l10n/Bundle", oooLocale).getString("preliminaryVolumeTooShortWarning");
        L10N_volumeDoesntBeginWithHeading = ResourceBundle.getBundle("be/docarch/odt2braille/l10n/Bundle", oooLocale).getString("volumeDoesntBeginWithHeadingWarning");
        L10N_omissionsInsideVolume = ResourceBundle.getBundle("be/docarch/odt2braille/l10n/Bundle", oooLocale).getString("omissionsInsideVolumeWarning");
        L10N_omissionsOutsideVolume = ResourceBundle.getBundle("be/docarch/odt2braille/l10n/Bundle", oooLocale).getString("omissionsOutsideVolumeWarning");
        L10N_transpositions = ResourceBundle.getBundle("be/docarch/odt2braille/l10n/Bundle", oooLocale).getString("transpositionsWarning");
        L10N_tocNotReplaced = ResourceBundle.getBundle("be/docarch/odt2braille/l10n/Bundle", oooLocale).getString("tocNotReplacedWarning");
        L10N_pageWidthTooSmall = ResourceBundle.getBundle("be/docarch/odt2braille/l10n/Bundle", oooLocale).getString("pageWidthTooSmallWarning");

        L10N_eightDotsNotSupported = (settings.exportOrEmboss?
                                            "The " + settings.getBrailleFileType().name() + " file format ":
                                            "The selected embosser ")
                                     + "doesn't support 8-dot Braille. Dots 7 and 8 will be ignored.";
        
    }

    /**
     * Check the flat .odt file generated by OpenOffice.org for possible accessibility issues.
     *
     */
    public void checkOdtFile() throws MalformedURLException,
                                      IOException {

        File flatOdtFile = odtTransformer.getFlatOdtFile();

        logger.entering("Checker", "checkFlatOdtFile");

        if (XPathUtils.evaluateBoolean(flatOdtFile.toURL().openStream(),
                "/office:document/office:body/office:text//table:covered-table-cell", namespace)) {
            tablesWithMergedCells = true;
        }
        if (XPathUtils.evaluateBoolean(flatOdtFile.toURL().openStream(),
                "/office:document/office:body/office:text//draw:frame[draw:image and not(svg:title or svg:desc)]", namespace)) {
            imagesWithoutTitleOrAltDescription = true;
        }
        if (XPathUtils.evaluateBoolean(flatOdtFile.toURL().openStream(),
                "/office:document/office:body/office:text//text:table-of-content", namespace)
                && !settings.tableOfContentEnabled) {
            tocNotReplaced = true;
        }
    }

    /**
     * Check the braille settings for possible accessibility issues.
     *
     */
    public void checkSettings() {

        logger.entering("Checker", "checkSettings");

        noPreliminaryPages = !settings.getPreliminaryPagesPresent();
        noTitlePage = !settings.getTranscriptionInfoAvailable();
        noHeadings = !settings.getHeadingsPresent();

    }

    /**
     * Check an intermediate daisy-like file generated by {@link Odt2Daisy} for possible accessibility issues.
     *
     * @param daisyFile   The daisy-line file.
     */
    public void checkDaisyFile(File daisyFile) 
                        throws MalformedURLException,
                               IOException {

        logger.entering("Checker", "checkDaisyFile");

        if (XPathUtils.evaluateBoolean(daisyFile.toURL().openStream(),
                "/dtb:dtbook//dtb:table[not(dtb:thead)]", namespace)) {
            tablesWithoutHeading = true;
        }
        if (XPathUtils.evaluateBoolean(daisyFile.toURL().openStream(),
                "/dtb:dtbook//dtb:div[@class='omission' and not(ancestor::dtb:div[@class='notInVolume'])]", namespace)) {
            omissionsInsideVolume = true;
        }
        if (XPathUtils.evaluateBoolean(daisyFile.toURL().openStream(),
                "/dtb:dtbook//dtb:div[@class='notInVolume']//dtb:div[@class='omission']", namespace)) {
            omissionsOutsideVolume = true;
        }
        if (XPathUtils.evaluateBoolean(daisyFile.toURL().openStream(),
                "/dtb:dtbook//dtb:div[@class='transposition']", namespace)) {
            transpositions = true;
        }
        if (XPathUtils.evaluateBoolean(daisyFile.toURL().openStream(),
                "/dtb:dtbook//dtb:div[@class='heading' and @continued='true']", namespace)) {
            volumeDoesntBeginWithHeading = true;
        }
    }

    /**
     *
     * @param pefFile
     * @throws MalformedURLException
     * @throws IOException
     */
    public void checkPefFile(File pefFile)
                      throws MalformedURLException,
                             IOException {

        logger.entering("Checker","checkPefFile");

        if (!settings.getEightDots()) {
            if (Integer.parseInt(XPathUtils.evaluateString(pefFile.toURL().openStream(),
                    "max(distinct-values(string-to-codepoints(string(/pef:pef/pef:body))))", namespace)) > 0x283F) {
                eightDotsNotSupported = true;
            }
        }
    }

    /**
     * Check the volume lengths of the resulting braille document for possible accessibility issues.
     * The volumes should not be too long or too short, and they should not differ to much in lenght.
     *
     * @param   bodyPageCount           The number of pages in the body of each volume. The other parameters should have the same array length.
     * @param   preliminaryPageCount    The number of preliminary pages in each volume.
     * @param   volumeTypes             The type of each volume ({@link VolumeType#NORMAL}, {@link VolumeType#PRELIMINARY} or
     *                                  {@link VolumeType#SUPPLEMENTARY}).
     *
     */
    public void checkVolumes(ArrayList<Volume> volumes) {

        logger.entering("Checker", "checkVolumes");

        int bodyRectoVersoPageCount = 0;
        int preliminaryRectoVersoPageCount = 0;
        int maxLength = 0;
        int minLength = Integer.MAX_VALUE;
        int length = 0;

        Volume volume;
        VolumeType type;
        int volumeNr;
        int numberOfBodyPages;
        int numberOfPreliminaryPages;

        for (int i=0;i<volumes.size();i++) {

            volume = volumes.get(i);
            type = volume.getType();
            volumeNr = volume.getNumber();
            numberOfBodyPages = volume.getLastBraillePage() - volume.getFirstBraillePage() + 1;
            numberOfPreliminaryPages = volume.getNumberOfPreliminaryPages();

            bodyRectoVersoPageCount = settings.getDuplex()?(int)Math.ceil(numberOfBodyPages/2):numberOfBodyPages;
            preliminaryRectoVersoPageCount = settings.getDuplex()?(int)Math.ceil(numberOfPreliminaryPages/2):numberOfPreliminaryPages;
            length = preliminaryRectoVersoPageCount + bodyRectoVersoPageCount;

            switch (type) {
                case PRELIMINARY:
                    if (length < MIN_VOLUME_LENGTH) {
                        preliminaryVolumeTooShort = true;
                    }
                    break;
                case NORMAL:
                    if (volumeNr == 1 && numberOfPreliminaryPages > MAX_VOLUME_LENGTH) {
                        preliminaryVolumeRequired = true;
                    }
                    if (length > MAX_VOLUME_LENGTH) {
                        volumesTooLong = true;
                    }
                    maxLength = Math.max(maxLength, length);
                    if (volumeNr < settings.NUMBER_OF_VOLUMES) {
                        if (length < MIN_VOLUME_LENGTH) {
                            volumesTooShort = true;
                        }
                        minLength = Math.min(minLength, length);
                    }
                    break;
                case SUPPLEMENTARY:
                default:
            }
        }

        if (settings.NUMBER_OF_VOLUMES > 1 && maxLength > minLength + MAX_VOLUME_DIFFERENCE) {
            volumesDifferTooMuch = true;
        }
    }

    /**
     * Generate a first warning.
     * This warning concerns issues that have been checked by <code>checkFlatOdtFile</code> and <code>checkSettings</code>
     *
     * @return      The warning, or an empty String if no issues were detected.
     */
    public String getFirstWarning() {

        logger.entering("Checker", "getFirstWarning");

        String details = "";

        if (noPreliminaryPages) {
            details += "\n \u2022 " + L10N_noPreliminaryPages;
        }
        if (noTitlePage) {
            details += "\n \u2022 " + L10N_noTitlePage;
        }
        if (noHeadings) {
            details += "\n \u2022 " + L10N_noHeadings;
        }
        if (tablesWithMergedCells) {
            details += "\n \u2022 " + L10N_tablesWithMergedCells;
        }
        if (imagesWithoutTitleOrAltDescription) {
            details += "\n \u2022 " + L10N_imagesWithoutTitleOrAltDescription;
        }
        if (tocNotReplaced) {
            details += "\n \u2022 " + L10N_tocNotReplaced;
        }
        if (pageWidthTooSmall) {
            details += "\n \u2022 " + L10N_pageWidthTooSmall;
        }

        if (!details.equals("")) {
            return L10N_warning + "\n\n" + L10N_details + ": \n" + details + "\n\n" + L10N_question;
        } else {
            return "";
        }
    }

    /**
     * Generate a second warning.
     * This warning concerns issues that have been checked by <code>checkDaisyFile</code> and <code>checkVolumeLengths</code>
     *
     * @return      The warning, or an empty String if no issues were detected.
     */
    public String getSecondWarning() {

        logger.entering("Checker", "getSecondWarning");

        String details = "";

        if (eightDotsNotSupported) {
            details += "\n \u2022 " + L10N_eightDotsNotSupported;
        }
        if (tablesWithoutHeading) {
            details += "\n \u2022 " + L10N_tablesWithoutHeading;
        }
        if (volumesTooLong) {
            details += "\n \u2022 " + L10N_volumesTooLong;
        }
        if (volumesTooShort) {
            details += "\n \u2022 " + L10N_volumesTooShort;
        }
        if (volumesDifferTooMuch) {
            details += "\n \u2022 " + L10N_volumesDifferTooMuch;
        }
        if (preliminaryVolumeRequired) {
            details += "\n \u2022 " + L10N_preliminaryVolumeRequired;
        }
        if (preliminaryVolumeTooShort) {
            details += "\n \u2022 " + L10N_preliminaryVolumeTooShort;
        }
        if (volumeDoesntBeginWithHeading) {
            details += "\n \u2022 " + L10N_volumeDoesntBeginWithHeading;
        }
        if (omissionsInsideVolume) {
            details += "\n \u2022 " + L10N_omissionsInsideVolume;
        }
        if (omissionsOutsideVolume) {
            details += "\n \u2022 " + L10N_omissionsOutsideVolume;
        }
        if (transpositions) {
            details += "\n \u2022 " + L10N_transpositions;
        }

        if (!details.equals("")) {
            return L10N_warning + "\n\n" + L10N_details + ": \n" + details + "\n\n" + L10N_question;
        } else {
            return "";
        }
    }
}
